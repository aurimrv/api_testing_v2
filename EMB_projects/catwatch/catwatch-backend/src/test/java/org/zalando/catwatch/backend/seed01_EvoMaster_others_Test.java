package org.zalando.catwatch.backend;

import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import  org.junit.Ignore;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-13T13:13:24.912-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 34 tests
 * <br>
 * Covered targets: 903
 * <br>
 * Used time: 1h 1m 42s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class seed01_EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR","PROJECT","LANGUAGE_LIST","MAINTAINERS","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    @Ignore
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=zmnSa&" + 
                    "limit=13&" + 
                    "offset=882938590&" + 
                    "start_date=_EM_1622_XYZ_&" + 
                    "end_date=SOCN&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "XzmtVN5A7lkkbd6X")
                .get(baseUrlOfSut + "/config?" + 
                    "access_token=&" + 
                    "q=f40zZf8Gm_&" + 
                    "offset=75b9A6YN3nbH5y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_1302_XYZ_&" + 
                    "offset=415&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "uBFfVPACyyU6A4w")
                .get(baseUrlOfSut + "/delete?" + 
                    "access_token=&" + 
                    "end_date=l&" + 
                    "q=MIAc8dXiZTDC_&" + 
                    "offset=3P8W3p2&" + 
                    "organizations=uXZl4Rvx&" + 
                    "limit=tSh0kpDf8f2vRom&" + 
                    "sortBy=&" + 
                    "language=e3kbZ2&" + 
                    "start_date=Gciga_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 318, " + 
                    " \"contributorsCount\": 694, " + 
                    " \"forksCount\": 333, " + 
                    " \"name\": \"_yd\", " + 
                    " \"organizationName\": \"nWThRF\", " + 
                    " \"snapshotDate\": \"2023-02-10T06:35:25\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 21, " + 
                    " \"externalContributorsCount\": 86, " + 
                    " \"gitHubProjectId\": 20, " + 
                    " \"maintainers\": [ " + 
                    " \"3y1\", " + 
                    " \"CXFUboTpI\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"esBaBqAd5\", " + 
                    " \"snapshotDate\": \"1986-05-04T17:05:02\", " + 
                    " \"title\": \"zSnMbtdZzh\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 444, " + 
                    " \"externalContributorsCount\": 124, " + 
                    " \"gitHubProjectId\": -409606841, " + 
                    " \"languageList\": [ " + 
                    " \"Zfiv8\", " + 
                    " \"8f3CDPOKs8SA2h\", " + 
                    " \"O7hjr5Z\", " + 
                    " \"Vb9iO4fxbSR\", " + 
                    " \"Ke7pPsT_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"EGwF6t0og6a\" " + 
                    " ], " + 
                    " \"organizationName\": \"SKuj\", " + 
                    " \"score\": 117, " + 
                    " \"snapshotDate\": \"1965-02-12T23:18:37\", " + 
                    " \"title\": \"5P0VXL\", " + 
                    " \"url\": \"ZiqjyxKvgCK\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "2Vf")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "access_token=&" + 
                    "q=u5&" + 
                    "offset=ZMklxUmZK1usyIK&" + 
                    "sortBy=dV2RKMx&" + 
                    "language=sjXsS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 25L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"_EM_780_XYZ_\"")
                .d("FORKS_COUNT", "967")
                .d("GIT_HUB_PROJECT_ID", "-1382293880")
                .d("LAST_PUSHED", "\"_EM_781_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "236")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "723")
                .d("URL", "NULL")
                .d("TITLE", "\"_EM_784_XYZ_\"")
                .d("IMAGE", "\"O6\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "a3N9XaT44EAzL2")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=Hh1&" + 
                    "offset=695&" + 
                    "start_date=1999-05-14T22%3A57%3A06&" + 
                    "end_date=2053-04-13T04%3A60%3A34&" + 
                    "sortBy=_EM_785_XYZ_&" + 
                    "language=6uTnw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2053-04-13T04:60:34'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2053-04-13T04:60:34]"))
                .body("'path'", containsString("/projects"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "sZBU2j8TbZmEF")
                .get(baseUrlOfSut + "/init?" + 
                    "access_token=&" + 
                    "end_date=ZqvPdcB2V6&" + 
                    "start_date=W9SB1ZcmNrTB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=l87&" + 
                    "start_date=_EM_4_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_4_XYZ_."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=J18VCOe1GWPVqK&" + 
                    "end_date=OhQRQKtJeWEzNem&" + 
                    "EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string OhQRQKtJeWEzNem."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 8L)
                .d("ID", "607")
                .d("ORGANIZATION_ID", "215")
                .d("SNAPSHOT_DATE", "\"1919-08-16 06:54:59\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "723")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "535")
                .d("PERSONAL_PROJECTS_COUNT", "881")
                .d("URL", "\"_EM_270_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=E&" + 
                    "end_date=OwTnzYwMt_SH&" + 
                    "EMextraParam123=_EM_271_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string E."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=GOWUf&" + 
                    "start_date=_EM_39_XYZ_&" + 
                    "end_date=_EM_40_XYZ_&" + 
                    "EMextraParam123=_EM_41_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            // WARNING: the code list seems to contain an unsupported code (0 is not a valid HTTP code). This could indicate a problem with the schema. The issue has been logged.
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 30L)
                .d("ID", "244")
                .d("SNAPSHOT_DATE", "\"1921-02-20 00:23:36\"")
                .d("ALL_CONTRIBUTORS_COUNT", "330")
                .d("ALL_FORKS_COUNT", "678")
                .d("ALL_SIZE_COUNT", "184")
                .d("ALL_STARS_COUNT", "568")
                .d("MEMBERS_COUNT", "143")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "230")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "286")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=acIQLAamqZw&" + 
                    "end_date=_EM_824_XYZ_&" + 
                    "EMextraParam123=SUaEH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=ULcvMx&" + 
                    "end_date=3UIRHnKH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/delete?EMextraParam123=_EM_22_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/export?access_token=_EM_812_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 21L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "393")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "290")
                .d("GIT_HUB_PROJECT_ID", "652")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"v\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"2060-03-05 21:41:51\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"P01I\"")
                .d("TITLE", "\"_EM_671_XYZ_\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_38_XYZ_")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=942&" + 
                    "sortBy=_EM_673_XYZ_&" + 
                    "q=_nnX1va2eHqaFS&" + 
                    "language=v&" + 
                    "access_token=_EM_675_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_43_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project?EMextraParam123=_EM_45_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_97_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 826, " + 
                    " \"loginId\": \"_EM_47_XYZ_\", " + 
                    " \"name\": \"_EM_48_XYZ_\", " + 
                    " \"organizationId\": 652, " + 
                    " \"organizationalProjectsCount\": 948 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 132, " + 
                    " \"name\": \"_EM_52_XYZ_\", " + 
                    " \"organizationName\": \"_EM_53_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 303, " + 
                    " \"personalCommitsCount\": 903, " + 
                    " \"personalProjectsCount\": 512330544, " + 
                    " \"snapshotDate\": \"1933-03-32T21:13:04\", " + 
                    " \"url\": \"_EM_54_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"organizationId\": 97 " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_57_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 293, " + 
                    " \"personalProjectsCount\": 208, " + 
                    " \"snapshotDate\": \"2047-09-28T04:38:49\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 388, " + 
                    " \"key\": { " + 
                    " \"id\": 978, " + 
                    " \"organizationId\": 851, " + 
                    " \"snapshotDate\": \"2066-01-21T08:42:23\" " + 
                    " }, " + 
                    " \"loginId\": \"_EM_59_XYZ_\", " + 
                    " \"name\": \"_EM_60_XYZ_\", " + 
                    " \"organizationId\": 239, " + 
                    " \"organizationalCommitsCount\": 275, " + 
                    " \"personalProjectsCount\": 925, " + 
                    " \"snapshotDate\": \"1984-12-17T11:32:52\", " + 
                    " \"url\": \"_EM_62_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 226, " + 
                    " \"languageList\": [ " + 
                    " \"_EM_65_XYZ_\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_67_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_68_XYZ_\", " + 
                    " \"primaryLanguage\": \"_EM_70_XYZ_\", " + 
                    " \"snapshotDate\": \"1954-04-13T-1:23:00\", " + 
                    " \"starsCount\": 647, " + 
                    " \"url\": \"_EM_71_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 721, " + 
                    " \"contributorsCount\": 881, " + 
                    " \"description\": \"BWxKqF\", " + 
                    " \"image\": \"_EM_72_XYZ_\", " + 
                    " \"languageList\": [], " + 
                    " \"lastPushed\": \"_EM_73_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_74_XYZ_\", " + 
                    " \"INsZIhW\", " + 
                    " \"_EM_75_XYZ_\", " + 
                    " \"_EM_76_XYZ_\" " + 
                    " ], " + 
                    " \"title\": \"_EM_80_XYZ_\", " + 
                    " \"url\": \"_EM_81_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"forksCount\": 192, " + 
                    " \"gitHubProjectId\": 1836060626, " + 
                    " \"lastPushed\": \"_EM_84_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_85_XYZ_\", " + 
                    " \"_EM_86_XYZ_\", " + 
                    " \"_EM_87_XYZ_\" " + 
                    " ], " + 
                    " \"name\": \"_EM_88_XYZ_\", " + 
                    " \"organizationName\": \"_EM_89_XYZ_\", " + 
                    " \"url\": \"_EM_92_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_904_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 86, " + 
                    " \"key\": { " + 
                    " \"id\": -1454319940993504204, " + 
                    " \"snapshotDate\": \"2015-01-08T19:27:51\" " + 
                    " }, " + 
                    " \"loginId\": \"_EM_894_XYZ_\", " + 
                    " \"name\": \"_EM_895_XYZ_\", " + 
                    " \"organizationName\": \"_EM_896_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 127, " + 
                    " \"personalProjectsCount\": 585, " + 
                    " \"snapshotDate\": \"2013-06-01T18:42:54\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 286, " + 
                    " \"allSizeCount\": 517, " + 
                    " \"allStarsCount\": 187, " + 
                    " \"externalContributorsCount\": 221, " + 
                    " \"snapshotDate\": \"1966-02-12T09:29:11\" " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 824, " + 
                    " \"allForksCount\": 802, " + 
                    " \"allStarsCount\": 321, " + 
                    " \"externalContributorsCount\": 718, " + 
                    " \"id\": 855, " + 
                    " \"key\": { " + 
                    " \"id\": 528 " + 
                    " }, " + 
                    " \"membersCount\": 191, " + 
                    " \"privateProjectCount\": 575, " + 
                    " \"programLanguagesCount\": 565, " + 
                    " \"tagsCount\": 5, " + 
                    " \"teamsCount\": 826 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 856, " + 
                    " \"allSizeCount\": 95, " + 
                    " \"externalContributorsCount\": 273, " + 
                    " \"id\": 579, " + 
                    " \"key\": { " + 
                    " \"id\": 706 " + 
                    " }, " + 
                    " \"organizationName\": \"_EM_900_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 954, " + 
                    " \"allSizeCount\": 427, " + 
                    " \"id\": 670, " + 
                    " \"key\": {}, " + 
                    " \"membersCount\": -347280204, " + 
                    " \"tagsCount\": -1995971473 " + 
                    " }, " + 
                    " { " + 
                    " \"allStarsCount\": 979, " + 
                    " \"organizationName\": \"_EM_902_XYZ_\", " + 
                    " \"programLanguagesCount\": 637, " + 
                    " \"publicProjectCount\": 300, " + 
                    " \"teamsCount\": 542 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_579_XYZ_&" + 
                    "access_token=_EM_581_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?access_token=_EM_248_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=_EM_0_XYZ_&" + 
                    "start_date=xUEXkh2vb9&" + 
                    "EMextraParam123=_EM_2_XYZ_&" + 
                    "access_token=m")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/init?access_token=HOvNkmxD")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=nvrMI1D1")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=glpe5JhUa&" + 
                    "limit=290&" + 
                    "offset=706&" + 
                    "start_date=H9bk4&" + 
                    "end_date=SmI&" + 
                    "sortBy=uNuvHkREKM&" + 
                    "q=k81LxlsJcs3&" + 
                    "EMextraParam123=_EM_20_XYZ_&" + 
                    "access_token=z1LyUs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "EMextraParam123=_EM_41_XYZ_&" + 
                    "access_token=YIzCbG_L")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_23_XYZ_")
                .get(baseUrlOfSut + "/delete?access_token=rRZM0umMw9")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=l87&" + 
                    "start_date=_EM_4_XYZ_&" + 
                    "end_date=_EM_5_XYZ_&" + 
                    "EMextraParam123=_EM_6_XYZ_&" + 
                    "access_token=SQccnpemvpBFc6Sf")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=_EM_400_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
        
    }


}
