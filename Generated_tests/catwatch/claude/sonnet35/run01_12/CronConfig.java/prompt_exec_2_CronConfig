You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 90
IllegalArgument Conte...
----------------------------------------

#####
*****
package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

import org.zalando.catwatch.backend.scheduler.CronConfig;
import org.zalando.catwatch.backend.scheduler.RetryableFetcher;
import org.springframework.boot.ExitCodeGenerator;
import org.springframework.context.ApplicationContext;
import org.springframework.boot.SpringApplication;
import org.mockito.Mockito;
import org.springframework.boot.CommandLineRunner;

public class sonnet35_run01_CronConfigTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testCronConfigConstructor() {
        CronConfig cronConfig = new CronConfig();
        assertNotNull(cronConfig);
    }

    @Test
    public void testCronMethodSuccess() throws Exception {
        RetryableFetcher mockFetcher = Mockito.mock(RetryableFetcher.class);
        ApplicationContext mockContext = Mockito.mock(ApplicationContext.class);
        SpringApplication mockSpringApplication = Mockito.mock(SpringApplication.class);

        Mockito.when(mockContext.getBean(SpringApplication.class)).thenReturn(mockSpringApplication);

        CronConfig cronConfig = new CronConfig();
        CommandLineRunner runner = cronConfig.cron(mockFetcher, mockContext);

        assertNotNull(runner);

        runner.run();

        Mockito.verify(mockFetcher).tryFetchData();
        Mockito.verify(mockSpringApplication).exit(Mockito.any());
    }

    @Test
    public void testCronMethodException() throws Exception {
        RetryableFetcher mockFetcher = Mockito.mock(RetryableFetcher.class);
        ApplicationContext mockContext = Mockito.mock(ApplicationContext.class);
        SpringApplication mockSpringApplication = Mockito.mock(SpringApplication.class);

        Mockito.when(mockContext.getBean(SpringApplication.class)).thenReturn(mockSpringApplication);
        Mockito.doThrow(new RuntimeException("Test exception")).when(mockFetcher).tryFetchData();

        CronConfig cronConfig = new CronConfig();
        CommandLineRunner runner = cronConfig.cron(mockFetcher, mockContext);

        assertNotNull(runner);

        runner.run();

        Mockito.verify(mockFetcher).tryFetchData();
        Mockito.verify(mockSpringApplication).exit(Mockito.any());
    }
}

*****
