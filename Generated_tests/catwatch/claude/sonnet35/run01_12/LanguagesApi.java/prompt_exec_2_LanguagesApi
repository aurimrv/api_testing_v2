You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 135
JSON path [0] doesn't match.
Expected: map containing ["name"->ANYTHING]
Actual: null
----------------------------------------
Line: 71
JSON path  doesn't match.
Expected: a collection with size a value greater than <0>
Actual: []
----------------------------------------
Line: 102
Expected status code <400> but was <500>.
----------------------------------------
Line: 113
Expected status code <400> but was <500>.
----------------------------------------
Line: 91
Expected status code <400> but was <200>.
----------------------------------------
Line: 82
JSON path  doesn't match.
Expected: a collection with size a value greater than <0>
Actual: []
----------------------------------------

#####
*****
package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class sonnet35_run01_LanguagesApiTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testLanguagesGetWithAllParameters() {
        given()
            .queryParam("organizations", "org1,org2")
            .queryParam("limit", 10)
            .queryParam("offset", 0)
            .queryParam("q", "Java")
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(200)
            .body("", hasSize(greaterThan(0)));
    }

    @Test
    public void testLanguagesGetWithRequiredParameterOnly() {
        given()
            .queryParam("organizations", "org1")
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(200)
            .body("", hasSize(greaterThan(0)));
    }

    @Test
    public void testLanguagesGetWithMissingRequiredParameter() {
        given()
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(400);
    }

    @Test
    public void testLanguagesGetWithInvalidLimit() {
        given()
            .queryParam("organizations", "org1")
            .queryParam("limit", -1)
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(400);
    }

    @Test
    public void testLanguagesGetWithInvalidOffset() {
        given()
            .queryParam("organizations", "org1")
            .queryParam("offset", -1)
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(400);
    }

    @Test
    public void testLanguagesGetWithEmptyResult() {
        given()
            .queryParam("organizations", "non_existing_org")
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(200)
            .body("", hasSize(0));
    }

    @Test
    public void testLanguagesGetResponseStructure() {
        given()
            .queryParam("organizations", "org1")
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(200)
            .body("[0]", hasKey("name"))
            .body("[0]", hasKey("percentage"))
            .body("[0]", hasKey("projectsCount"));
    }

    @Test
    public void testLanguagesGetWithSearchQuery() {
        given()
            .queryParam("organizations", "org1")
            .queryParam("q", "Java")
        .when()
            .get(baseUrlOfSut + "/languages")
        .then()
            .statusCode(200)
            .body("name", everyItem(containsString("Java")));
    }
}

*****
