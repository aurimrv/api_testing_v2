You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Do fix the compilation errors delimited by ##### given the code below delimited by *****.

The response must contain only Java code in JUnit 4 format.

#####
[[1;31mERROR[m] COMPILATION ERROR : 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[13,19] cannot find symbol
  symbol:   class MockedStatic
  location: package org.mockito
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[36,14] cannot find symbol
  symbol:   class MockedStatic
  location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[36,56] cannot find symbol
  symbol:   method mockStatic(java.lang.Class<org.zalando.catwatch.backend.repo.util.DatabasePing>)
  location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[54,14] cannot find symbol
  symbol:   class MockedStatic
  location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[54,56] cannot find symbol
  symbol:   method mockStatic(java.lang.Class<org.zalando.catwatch.backend.repo.util.DatabasePing>)
  location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-compiler-plugin:3.8.0:testCompile[m [1m(default-testCompile)[m on project [36mcatwatch-backend[m: [1;31mCompilation failure[m: Compilation failure: 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[13,19] cannot find symbol
[[1;31mERROR[m]   symbol:   class MockedStatic
[[1;31mERROR[m]   location: package org.mockito
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[36,14] cannot find symbol
[[1;31mERROR[m]   symbol:   class MockedStatic
[[1;31mERROR[m]   location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[36,56] cannot find symbol
[[1;31mERROR[m]   symbol:   method mockStatic(java.lang.Class<org.zalando.catwatch.backend.repo.util.DatabasePing>)
[[1;31mERROR[m]   location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[54,14] cannot find symbol
[[1;31mERROR[m]   symbol:   class MockedStatic
[[1;31mERROR[m]   location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/sonnet35_run01_OptionalFlywayMigrationInitializerTest.java:[54,56] cannot find symbol
[[1;31mERROR[m]   symbol:   method mockStatic(java.lang.Class<org.zalando.catwatch.backend.repo.util.DatabasePing>)
[[1;31mERROR[m]   location: class org.zalando.catwatch.backend.sonnet35_run01_OptionalFlywayMigrationInitializerTest
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

#####
*****
package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.zalando.catwatch.backend.postgres.OptionalFlywayMigrationInitializer;
import org.flywaydb.core.Flyway;
import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;
import org.springframework.jdbc.core.JdbcTemplate;
import static org.mockito.Mockito.*;
import org.mockito.MockedStatic;
import org.zalando.catwatch.backend.repo.util.DatabasePing;
import java.lang.reflect.Field;

public class sonnet35_run01_OptionalFlywayMigrationInitializerTest {

    @Test
    public void testConstructor() {
        Flyway flyway = mock(Flyway.class);
        FlywayMigrationStrategy migrationStrategy = mock(FlywayMigrationStrategy.class);
        OptionalFlywayMigrationInitializer initializer = new OptionalFlywayMigrationInitializer(flyway, migrationStrategy);
        assertNotNull(initializer);
    }

    @Test
    public void testAfterPropertiesSetWhenDatabaseAvailable() throws Exception {
        Flyway flyway = mock(Flyway.class);
        FlywayMigrationStrategy migrationStrategy = mock(FlywayMigrationStrategy.class);
        JdbcTemplate jdbcTemplate = mock(JdbcTemplate.class);

        OptionalFlywayMigrationInitializer initializer = new OptionalFlywayMigrationInitializer(flyway, migrationStrategy);
        setPrivateField(initializer, "jdbcTemplate", jdbcTemplate);

        try (MockedStatic<DatabasePing> mockedStatic = mockStatic(DatabasePing.class)) {
            mockedStatic.when(() -> DatabasePing.isDatabaseAvailable(jdbcTemplate)).thenReturn(true);

            initializer.afterPropertiesSet();

            verify(flyway).migrate();
        }
    }

    @Test
    public void testAfterPropertiesSetWhenDatabaseNotAvailable() throws Exception {
        Flyway flyway = mock(Flyway.class);
        FlywayMigrationStrategy migrationStrategy = mock(FlywayMigrationStrategy.class);
        JdbcTemplate jdbcTemplate = mock(JdbcTemplate.class);

        OptionalFlywayMigrationInitializer initializer = new OptionalFlywayMigrationInitializer(flyway, migrationStrategy);
        setPrivateField(initializer, "jdbcTemplate", jdbcTemplate);

        try (MockedStatic<DatabasePing> mockedStatic = mockStatic(DatabasePing.class)) {
            mockedStatic.when(() -> DatabasePing.isDatabaseAvailable(jdbcTemplate)).thenReturn(false);

            initializer.afterPropertiesSet();

            verify(flyway, never()).migrate();
        }
    }

    private void setPrivateField(Object object, String fieldName, Object fieldValue) throws Exception {
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(object, fieldValue);
    }
}

*****
