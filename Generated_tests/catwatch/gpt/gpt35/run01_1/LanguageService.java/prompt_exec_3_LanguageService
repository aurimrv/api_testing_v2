You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####

#####
*****

import java.util.List;
import java.util.Comparator;
import java.util.Optional;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.Matchers.*;

public class gpt35_run01_LanguageServiceTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testGetMainLanguages() {
        LanguageService languageService = new LanguageService(new ProjectRepository());

        // Test empty input
        List<Language> result = languageService.getMainLanguages("", Comparator.comparing(Language::getName), Optional.empty());
        assertNotNull(result);
        assertTrue(result.isEmpty());

        // Test with valid organizations
        List<Language> result2 = languageService.getMainLanguages("org1,org2", Comparator.comparing(Language::getName), Optional.empty());
        assertNotNull(result2);
        
        // Add more specific tests here based on the requirements to achieve full coverage
    }

    // Add missing classes to resolve compilation errors
    private class LanguageService {
        private ProjectRepository projectRepository;

        public LanguageService(ProjectRepository projectRepository) {
            this.projectRepository = projectRepository;
        }

        public List<Language> getMainLanguages(String input, Comparator<Language> comparator, Optional<?> optional) {
            // Implement the logic here
            return null;
        }
    }

    private class ProjectRepository {
        // Implement the repository methods here
    }

    private class Language {
        private String name;

        public String getName() {
            return name;
        }

        // Add more properties and methods as needed
    }

}

*****
