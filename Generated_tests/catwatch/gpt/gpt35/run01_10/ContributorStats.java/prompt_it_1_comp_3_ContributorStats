You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Do fix the compilation errors delimited by ##### given the code below delimited by *****.

The response must contain only Java code in JUnit 4 format.

#####
[[1;31mERROR[m] COMPILATION ERROR : 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[186,57] unclosed string literal
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[186,75] reached end of file while parsing
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-compiler-plugin:3.8.0:testCompile[m [1m(default-testCompile)[m on project [36mcatwatch-backend[m: [1;31mCompilation failure[m: Compilation failure: 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[186,57] unclosed string literal
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[186,75] reached end of file while parsing
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

#####
*****

package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class gpt35_run01_ContributorStatsTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testConstructor() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals("John Doe", contributorStats.getName());
        assertEquals(Arrays.asList("OrgName1"), contributorStats.getOrganizationName());
        assertEquals("url1", contributorStats.getUrl());
        assertEquals(Arrays.asList(10, 15), contributorStats.getOrganizationalCommitsCounts());
        assertEquals(Arrays.asList(5, 7), contributorStats.getPersonalCommitsCounts());
        assertEquals(Arrays.asList(3, 4), contributorStats.getOrganizationalProjectsCounts());
        assertEquals(Arrays.asList(2, 3), contributorStats.getPersonalProjectsCounts());
        assertEquals(Arrays.asList("2022-10-12T10:00:00Z", "2022-10-12T11:00:00Z"), contributorStats.getSnapshotDates());
    }

    @Test
    public void testMethodGetName() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals("John Doe", contributorStats.getName());
    }

    @Test
    public void testMethodGetOrganizationName() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList("OrgName1"), contributorStats.getOrganizationName());
    }

    @Test
    public void testMethodGetUrl() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals("url1", contributorStats.getUrl());
    }

    @Test
    public void testMethodGetOrganizationalCommitsCounts() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList(10, 15), contributorStats.getOrganizationalCommitsCounts());
    }

    @Test
    public void testMethodGetPersonalCommitsCounts() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList(5, 7), contributorStats.getPersonalCommitsCounts());
    }

    @Test
    public void testMethodGetOrganizationalProjectsCounts() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList(3, 4), contributorStats.getOrganizationalProjectsCounts());
    }

    @Test
    public void testMethodGetPersonalProjectsCounts() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList(2, 3), contributorStats.getPersonalProjectsCounts());
    }

    @Test
    public void testMethodGetSnapshotDates() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T11:00:00Z", "url1")
        );
        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals(Arrays.asList("2022-10-12T10:00:00Z", "2022-10-12T11:00:00Z"), contributorStats.getSnapshotDates());
    }

    @Test
    public void testMethodGetDistinctContributors() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 1, "2022-10-12T10:00:00Z"), "login2", "Jane Smith", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T10:00:00Z", "url2"),
            new Contributor(3, new ContributorKey(3, 2, "2022-10-12T11:00:00Z"), "login1", "John Doe", 2, "OrgName2", 12, 6, 4, 3, "2022-10-12T11:00:00Z", "url3")
        );

        Map<String, List<Contributor>> distinctContributors = ContributorStats.getDistinctContributors(contributors);

        assertEquals(2, distinctContributors.size());
        assertTrue(distinctContributors.containsKey("login1"));
        assertTrue(distinctContributors.containsKey("login2"));
    }

    @Test
    public void testMethodBuildStats() {
        List<Contributor> contributors = Arrays.asList(
            new Contributor(1, new ContributorKey(1, 1, "2022-10-12T10:00:00Z"), "login1", "John Doe", 1, "OrgName1", 10, 5, 3, 2, "2022-10-12T10:00:00Z", "url1"),
            new Contributor(2, new ContributorKey(2, 1, "2022-10-12T10:00:00Z"), "login2", "Jane Smith", 1, "OrgName1", 15, 7, 4, 3, "2022-10-12T10:00:00Z", "url2"),
            new Contributor(3, new ContributorKey(3, 2, "2022-10-12T10:00:00Z"), "login1", "John Doe", 2, "OrgName2", 12, 6, 4, 3, "2022-10-12T10:00:00Z", "url3"),
            new Contributor(4, new ContributorKey(4, 2, "2022-10-12T11:00:
*****
