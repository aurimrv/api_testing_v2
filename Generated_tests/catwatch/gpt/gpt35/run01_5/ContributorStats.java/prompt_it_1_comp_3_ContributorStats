You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Do fix the compilation errors delimited by ##### given the code below delimited by *****.

The response must contain only Java code in JUnit 4 format.

#####
[[1;31mERROR[m] COMPILATION ERROR : 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[63,101] ')' expected
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-compiler-plugin:3.8.0:testCompile[m [1m(default-testCompile)[m on project [36mcatwatch-backend[m: [1;31mCompilation failure[m
[[1;31mERROR[m] [1;31m/media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/src/test/java/org/zalando/catwatch/backend/gpt35_run01_ContributorStatsTest.java:[63,101] ')' expected[m
[[1;31mERROR[m] [1;31m[m
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

#####
*****

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class gpt35_run01_ContributorStatsTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testConstructor() {
        List<Contributor> contributors = new ArrayList<>();
        contributors.add(new Contributor("1", "John Doe", "org1", 10, 5, 3, 2, new Date(), "url1"));
        contributors.add(new Contributor("1", "Jane Smith", "org1", 15, 7, 4, 3, new Date(), "url2");

        ContributorStats contributorStats = new ContributorStats(contributors);

        assertNotNull(contributorStats);
        assertEquals("John Doe", contributorStats.getName());
        assertEquals("org1", contributorStats.getOrganizationName().get(0));
        assertEquals(10, contributorStats.getOrganizationalCommitsCounts().get(0).intValue());
        assertEquals(5, contributorStats.getPersonalCommitsCounts().get(0).intValue());
        assertEquals(3, contributorStats.getOrganizationalProjectsCounts().get(0).intValue());
        assertEquals(2, contributorStats.getPersonalProjectsCounts().get(0).intValue());
        assertEquals(2, contributorStats.getSnapshotDates().size());
    }

    @Test
    public void testGetters() {
        List<Contributor> contributors = new ArrayList<>();
        contributors.add(new Contributor("1", "John Doe", "org1", 10, 5, 3, 2, new Date(), "url1"));

        ContributorStats contributorStats = new ContributorStats(contributors);

        assertEquals("John Doe", contributorStats.getName());
        assertEquals("org1", contributorStats.getOrganizationName().get(0));
        assertEquals(10, contributorStats.getOrganizationalCommitsCounts().get(0).intValue());
        assertEquals(5, contributorStats.getPersonalCommitsCounts().get(0).intValue());
        assertEquals(3, contributorStats.getOrganizationalProjectsCounts().get(0).intValue());
        assertEquals(2, contributorStats.getPersonalProjectsCounts().get(0).intValue());
        assertEquals(1, contributorStats.getSnapshotDates().size());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEmptyLoginId() {
        List<Contributor> contributors = new ArrayList<>();
        contributors.add(new Contributor("", "John Doe", "org1", 10, 5, 3, 2, new Date(), "url1"));

        new ContributorStats(contributors);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithDifferentLoginIds() {
        List<Contributor> contributors = new ArrayList<>();
        contributors.add(new Contributor("1", "John Doe", "org1", 10, 5, 3, 2, new Date(), "url1"));
        contributors.add(new Contributor("2", "Jane Smith", "org1", 15, 7, 4, 3, new Date(), "url2"));

        new ContributorStats(contributors);
    }

    @Test
    public void testToString() {
        List<Contributor> contributors = new ArrayList<>();
        contributors.add(new Contributor("1", "John Doe", "org1", 10, 5, 3, 2, new Date(), "url1"));
        contributors.add(new Contributor("1", "Jane Smith", "org1", 15, 7, 4, 3, new Date(), "url2"));

        ContributorStats contributorStats = new ContributorStats(contributors);

        String expectedString = "ContributorStats(John Doe, [org1], url1, " + contributorStats.getSnapshotDates() + ")";
        assertEquals(expectedString, contributorStats.toString());
    }
}

*****
