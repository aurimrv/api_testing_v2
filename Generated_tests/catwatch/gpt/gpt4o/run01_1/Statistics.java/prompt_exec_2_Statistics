You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 118
JSON path $ doesn't match.
Expected: not an empty collection
Actual: []
----------------------------------------

#####
*****

package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;
import java.util.Date;
import org.zalando.catwatch.backend.model.Statistics;

public class gpt4o_run01_StatisticsTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    // Test to cover the <init> method of org/zalando/catwatch/backend/model/Statistics
    @Test
    public void testStatisticsConstructor() {
        Statistics statistics = new Statistics();
        assertNotNull(statistics);
    }

    // Test to cover overloaded constructor of org/zalando/catwatch/backend/model/Statistics
    @Test
    public void testStatisticsConstructorWithParameters() {
        long id = 12345L;
        Date snapshotDate = new Date();
        Statistics statistics = new Statistics(id, snapshotDate);

        assertNotNull(statistics);
        assertEquals(id, statistics.getId());
        assertEquals(snapshotDate, statistics.getSnapshotDate());
    }

    // Test to cover getId() method
    @Test
    public void testGetId() {
        long id = 54321L;
        Date snapshotDate = new Date();
        Statistics statistics = new Statistics(id, snapshotDate);

        assertEquals(id, statistics.getId());
    }

    // Test to cover getSnapshotDate() method when key is null
    @Test
    public void testGetSnapshotDateNullKey() {
        Statistics statistics = new Statistics();
        assertNull(statistics.getSnapshotDate());
    }

    // Test to cover getSnapshotDate() method when key is not null
    @Test
    public void testGetSnapshotDateNonNullKey() {
        long id = 98765L;
        Date snapshotDate = new Date();
        Statistics statistics = new Statistics(id, snapshotDate);

        assertEquals(snapshotDate, statistics.getSnapshotDate());
    }

    // Test to ensure REST Assured interaction with the /statistics endpoint
    @Test
    public void testStatisticsEndpoint() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/statistics")
            .then()
            .statusCode(200)
            .body("$", not(empty()));
    }
}

*****
