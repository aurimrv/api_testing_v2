You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####

#####
*****

package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;
import org.mockito.Mockito;
import org.springframework.jdbc.core.JdbcTemplate;
import org.zalando.catwatch.backend.repo.util.DatabasePing;

public class gpt4o_run01_DatabasePingTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    /**
     * Test case to cover the case where `databaseAvailable` is null 
     * and the database is reachable (successful query execution).
     */
    @Test
    public void testDatabasePingSuccess() {
        // Arrange
        JdbcTemplate jdbcTemplateMock = Mockito.mock(JdbcTemplate.class);
        Mockito.doNothing().when(jdbcTemplateMock).execute("select 1;");

        // Act
        boolean result = DatabasePing.isDatabaseAvailable(jdbcTemplateMock);

        // Assert
        assertTrue(result);
    }

    /**
     * Test case to cover the case where `databaseAvailable` is null 
     * and a RuntimeException occurs (database not reachable).
     */
    @Test
    public void testDatabasePingFailure() {
        // Arrange
        JdbcTemplate jdbcTemplateMock = Mockito.mock(JdbcTemplate.class);
        Mockito.doThrow(new RuntimeException("Database error")).when(jdbcTemplateMock).execute("select 1;");

        // Act
        boolean result = DatabasePing.isDatabaseAvailable(jdbcTemplateMock);

        // Assert
        assertFalse(result);
    }

    /**
     * Test case to ensure coverage when `databaseAvailable` is already set 
     * (cached value is used without performing the query).
     */
    @Test
    public void testDatabasePingCachedValue() {
        // Arrange
        JdbcTemplate jdbcTemplateMock = Mockito.mock(JdbcTemplate.class);
        Mockito.doNothing().when(jdbcTemplateMock).execute("select 1;");

        // Initialize the cached value
        DatabasePing.isDatabaseAvailable(jdbcTemplateMock);

        // Act - call the method again (should use cached value)
        boolean result = DatabasePing.isDatabaseAvailable(jdbcTemplateMock);

        // Assert
        assertTrue(result);

        // Verify that the database query is not executed again
        Mockito.verify(jdbcTemplateMock, Mockito.times(1)).execute("select 1;");
    }

    /**
     * Test case to ensure the constructor of the `DatabasePing` class is executed.
     */
    @Test
    public void testDatabasePingConstructor() {
        // Act
        DatabasePing databasePing = new DatabasePing();

        // Assert
        assertNotNull(databasePing);
    }
}

*****
