You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 128
JSON path $ doesn't match.
Expected: a collection with size a value less than or equal to <5>
Actual: {timestamp=1744755087580, status=500, error=Internal Server Error, exception=java.lang.UnsupportedOperationException, message=this parameter configuration is not implemented yet .. start date, end date required atm, path=/contributors}
----------------------------------------
Line: 103
Response body doesn't match expectation.
Expected: a string containing "startDate must be before endDate"
Actual: {"timestamp":1744755087446,"status":500,"error":"Internal Server Error","exception":"java.lang.RuntimeException","message":"java.text.ParseException: Unparseable date: \"2023-01-01\"","path":"/contributors"}
----------------------------------------
Line: 117
Response body doesn't match expectation.
Expected: a string containing "this parameter configuration is not implemented yet"
Actual: {"timestamp":1744755087535,"status":500,"error":"Internal Server Error","exception":"java.lang.RuntimeException","message":"java.text.ParseException: Unparseable date: \"2023-12-31\"","path":"/contributors"}
----------------------------------------
Line: 90
JSON path $ doesn't match.
Expected: a collection with size a value less than or equal to <5>
Actual: {timestamp=1744755087492, status=500, error=Internal Server Error, exception=java.lang.IllegalArgumentException, message=sortBy must be empty or have a valid value but was -commits. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name, path=/contributors}
----------------------------------------
Line: 75
JSON path $ doesn't match.
Expected: a collection with size a value less than or equal to <5>
Actual: {timestamp=1744755086949, status=500, error=Internal Server Error, exception=java.lang.IllegalArgumentException, message=sortBy must be empty or have a valid value but was -commits. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name, path=/contributors}
----------------------------------------

#####
*****

package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class gpt4o_run01_ContributorsApiTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testContributorsGetWithValidParameters() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("limit", 5)
            .queryParam("offset", 0)
            .queryParam("start_date", "2023-01-01")
            .queryParam("end_date", "2023-12-31")
            .queryParam("sortBy", "-commits")
            .queryParam("q", "test")
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500) // Updated from 200 to 500
            .body("$", hasSize(lessThanOrEqualTo(5)));
    }

    @Test
    public void testContributorsGetWithNoStartDateAndEndDate() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("limit", 5)
            .queryParam("offset", 0)
            .queryParam("sortBy", "-commits")
            .queryParam("q", "test")
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500) // Updated from 200 to 500
            .body("$", hasSize(lessThanOrEqualTo(5)));
    }

    @Test
    public void testContributorsGetInvalidDates() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("start_date", "2023-12-31")
            .queryParam("end_date", "2023-01-01")
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500)
            .body(containsString("startDate must be before endDate"));
    }

    @Test
    public void testContributorsGetUnsupportedConfiguration() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("start_date", "2023-01-01")
            .queryParam("end_date", "2023-12-31")
            .queryParam("q", "unsupported")
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500)
            .body(containsString("this parameter configuration is not implemented yet"));
    }

    @Test
    public void testContributorsGetDefaultLimit() {
        given()
            .queryParam("organizations", "test-org")
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500) // Updated from 200 to 500
            .body("$", hasSize(lessThanOrEqualTo(5)));
    }

    @Test
    public void testSublistBoundaryCases() {
        given()
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(400) // Updated from 200 to 400
            .body("$", notNullValue());
    }

    @Test
    public void testContributorsApiConstructorExecution() {
        assertNotNull(new org.zalando.catwatch.backend.web.ContributorsApi(null, null));
    }

    @Test
    public void testValidateInvalidLimit() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("limit", -1)
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500)
            .body(containsString("limit must be greater than zero"));
    }

    @Test
    public void testValidateInvalidOffset() {
        given()
            .queryParam("organizations", "test-org")
            .queryParam("offset", -1)
        .when()
            .get(baseUrlOfSut + "/contributors")
        .then()
            .statusCode(500)
            .body(containsString("offset must be greater than zero"));
    }
}

*****
