You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####

#####
*****

package org.zalando.catwatch.backend;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;
import javax.sql.DataSource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.zalando.catwatch.backend.repo.util.DatabasePing;

public class gpt4o_run01_DatabasePingTest {

    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    private static DataSource dataSource;

    @BeforeClass
    public static void initClass() throws Exception {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));

        // Initialize the DataSource
        try {
            dataSource = (DataSource) controller.getClass().getMethod("getDataSource").invoke(controller);
        } catch (NoSuchMethodException | IllegalAccessException | java.lang.reflect.InvocationTargetException e) {
            throw new RuntimeException("Failed to initialize DataSource", e);
        }
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testDatabaseAvailableTrue() {
        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        jdbcTemplate.setDataSource(dataSource); // Use database set up in the SUT

        // Simulating a successful database ping
        boolean isAvailable = DatabasePing.isDatabaseAvailable(jdbcTemplate);
        assertTrue(isAvailable);
    }

    @Test
    public void testDatabaseAvailableFalse() {
        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        jdbcTemplate.setDataSource(null); // Setting a null DataSource to simulate a failure

        boolean isAvailable = DatabasePing.isDatabaseAvailable(jdbcTemplate);
        assertFalse(isAvailable);
    }

    @Test
    public void testDatabasePingCachedValue() {
        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        jdbcTemplate.setDataSource(dataSource); // Use database set up in the SUT

        // First call to initialize the value
        DatabasePing.isDatabaseAvailable(jdbcTemplate);

        // Set a new data source to check if the cached value is used
        jdbcTemplate.setDataSource(null);
        boolean isAvailable = DatabasePing.isDatabaseAvailable(jdbcTemplate);

        assertTrue(isAvailable); // Cached value should remain TRUE
    }

    @Test
    public void testConstructorExecution() {
        // Testing explicit instantiation of the class
        DatabasePing databasePing = new DatabasePing();
        assertNotNull(databasePing);
    }
}

*****
