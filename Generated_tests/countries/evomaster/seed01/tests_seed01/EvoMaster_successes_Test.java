import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2025-02-24T17:57:56.953-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 32 tests
 * <br>
 * Covered targets: 1039
 * <br>
 * Used time: 1h 0m 1s
 * <br>
 * Needed budget for current results: 27%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/openapi.yaml")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/all?EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/polar?EMextraParam123=_EM_112_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antarctica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aq"))
                .body("[0].'alpha2Code'", containsString("AQ"))
                .body("[0].'alpha3Code'", containsString("ATA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(0))
                .body("[0].'region'", containsString("Polar"))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(1000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-74.65))
                .body("[0].'latlng'[1]", numberMatches(4.48))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(1.4E7))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC-03:00", "UTC+03:00", "UTC+05:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antarctica"))
                .body("[0].'numericCode'", containsString("010"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("AUD", "GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antarktika"))
                .body("[0].'translations'.'es'", containsString("Antártida"))
                .body("[0].'translations'.'fr'", containsString("Antarctique"))
                .body("[0].'translations'.'ja'", containsString("南極大陸"))
                .body("[0].'translations'.'it'", containsString("Antartide"))
                .body("[0].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_28_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/central%20america?EMextraParam123=_EM_27_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Belize"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[0].'capital'", containsString("Belmopan"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(368310.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.25))
                .body("[0].'latlng'[1]", numberMatches(-88.75))
                .body("[0].'demonym'", containsString("Belizean"))
                .body("[0].'area'", numberMatches(22966.0))
                .body("[0].'gini'", numberMatches(53.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "MEX"))
                .body("[0].'nativeName'", containsString("Belize"))
                .body("[0].'numericCode'", containsString("084"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "es"))
                .body("[0].'translations'.'de'", containsString("Belize"))
                .body("[0].'translations'.'es'", containsString("Belice"))
                .body("[0].'translations'.'fr'", containsString("Belize"))
                .body("[0].'translations'.'ja'", containsString("ベリーズ"))
                .body("[0].'translations'.'it'", containsString("Belize"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Costa Rica"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cr"))
                .body("[1].'alpha2Code'", containsString("CR"))
                .body("[1].'alpha3Code'", containsString("CRI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("506"))
                .body("[1].'capital'", containsString("San José"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(4773130.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(10.0))
                .body("[1].'latlng'[1]", numberMatches(-84.0))
                .body("[1].'demonym'", containsString("Costa Rican"))
                .body("[1].'area'", numberMatches(51100.0))
                .body("[1].'gini'", numberMatches(50.7))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("NIC", "PAN"))
                .body("[1].'nativeName'", containsString("Costa Rica"))
                .body("[1].'numericCode'", containsString("188"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("CRC"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("es"))
                .body("[1].'translations'.'de'", containsString("Costa Rica"))
                .body("[1].'translations'.'es'", containsString("Costa Rica"))
                .body("[1].'translations'.'fr'", containsString("Costa Rica"))
                .body("[1].'translations'.'ja'", containsString("コスタリカ"))
                .body("[1].'translations'.'it'", containsString("Costa Rica"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("El Salvador"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".sv"))
                .body("[2].'alpha2Code'", containsString("SV"))
                .body("[2].'alpha3Code'", containsString("SLV"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("503"))
                .body("[2].'capital'", containsString("San Salvador"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("SV", "Republic of El Salvador", "República de El Salvador"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Central America"))
                .body("[2].'population'", numberMatches(6401240.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(13.83333333))
                .body("[2].'latlng'[1]", numberMatches(-88.91666666))
                .body("[2].'demonym'", containsString("Salvadoran"))
                .body("[2].'area'", numberMatches(21041.0))
                .body("[2].'gini'", numberMatches(48.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-06:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("GTM", "HND"))
                .body("[2].'nativeName'", containsString("El Salvador"))
                .body("[2].'numericCode'", containsString("222"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'", hasItems("SVC", "USD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("es"))
                .body("[2].'translations'.'de'", containsString("El Salvador"))
                .body("[2].'translations'.'es'", containsString("El Salvador"))
                .body("[2].'translations'.'fr'", containsString("Salvador"))
                .body("[2].'translations'.'ja'", containsString("エルサルバドル"))
                .body("[2].'translations'.'it'", containsString("El Salvador"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/ps?EMextraParam123=_EM_30_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/968")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Oman"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".om"))
                .body("[0].'alpha2Code'", containsString("OM"))
                .body("[0].'alpha3Code'", containsString("OMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("968"))
                .body("[0].'capital'", containsString("Muscat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4185440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.0))
                .body("[0].'latlng'[1]", numberMatches(57.0))
                .body("[0].'demonym'", containsString("Omani"))
                .body("[0].'area'", numberMatches(309500.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("SAU", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("عمان"))
                .body("[0].'numericCode'", containsString("512"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("OMR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Oman"))
                .body("[0].'translations'.'es'", containsString("Omán"))
                .body("[0].'translations'.'fr'", containsString("Oman"))
                .body("[0].'translations'.'ja'", containsString("オマーン"))
                .body("[0].'translations'.'it'", containsString("oman"))
                .body("[0].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_142_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/castries?EMextraParam123=_EM_141_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Lucia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lc"))
                .body("[0].'alpha2Code'", containsString("LC"))
                .body("[0].'alpha3Code'", containsString("LCA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Castries"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("LC"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(185000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.88333333))
                .body("[0].'latlng'[1]", numberMatches(-60.96666666))
                .body("[0].'demonym'", containsString("Saint Lucian"))
                .body("[0].'area'", numberMatches(616.0))
                .body("[0].'gini'", numberMatches(42.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Lucia"))
                .body("[0].'numericCode'", containsString("662"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Saint Lucia"))
                .body("[0].'translations'.'es'", containsString("Santa Lucía"))
                .body("[0].'translations'.'fr'", containsString("Saint-Lucie"))
                .body("[0].'translations'.'ja'", containsString("セントルシア"))
                .body("[0].'translations'.'it'", containsString("Santa Lucia"))
                .body("[0].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3718_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=&" + 
                    "EMextraParam123=_EM_3717_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=1sc&" + 
                    "EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha/bN?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Brunei"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".bn"))
                .body("'alpha2Code'", containsString("BN"))
                .body("'alpha3Code'", containsString("BRN"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("673"))
                .body("'capital'", containsString("Bandar Seri Begawan"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("BN", "Nation of Brunei", " the Abode of Peace"))
                .body("'region'", containsString("Asia"))
                .body("'subregion'", containsString("South-Eastern Asia"))
                .body("'population'", numberMatches(393372.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(4.5))
                .body("'latlng'[1]", numberMatches(114.66666666))
                .body("'demonym'", containsString("Bruneian"))
                .body("'area'", numberMatches(5765.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+08:00"))
                .body("'borders'.size()", equalTo(1))
                .body("'borders'", hasItems("MYS"))
                .body("'nativeName'", containsString("Negara Brunei Darussalam"))
                .body("'numericCode'", containsString("096"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("BND"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'", hasItems("ms"))
                .body("'translations'.'de'", containsString("Brunei"))
                .body("'translations'.'es'", containsString("Brunei"))
                .body("'translations'.'fr'", containsString("Brunei"))
                .body("'translations'.'ja'", containsString("ブルネイ・ダルサラーム"))
                .body("'translations'.'it'", containsString("Brunei"))
                .body("'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/lKR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sri Lanka"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lk"))
                .body("[0].'alpha2Code'", containsString("LK"))
                .body("[0].'alpha3Code'", containsString("LKA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("94"))
                .body("[0].'capital'", containsString("Colombo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LK", "ilaṅkai", "Democratic Socialist Republic of Sri Lanka"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.0675E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(81.0))
                .body("[0].'demonym'", containsString("Sri Lankan"))
                .body("[0].'area'", numberMatches(65610.0))
                .body("[0].'gini'", numberMatches(40.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IND"))
                .body("[0].'nativeName'", containsString("śrī laṃkāva"))
                .body("[0].'numericCode'", containsString("144"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LKR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("si", "ta"))
                .body("[0].'translations'.'de'", containsString("Sri Lanka"))
                .body("[0].'translations'.'es'", containsString("Sri Lanka"))
                .body("[0].'translations'.'fr'", containsString("Sri Lanka"))
                .body("[0].'translations'.'ja'", containsString("スリランカ"))
                .body("[0].'translations'.'it'", containsString("Sri Lanka"))
                .body("[0].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/kW?fields=_EM_3628_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_291_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/region/oceania?fields=_EM_352_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/375?fields=_EM_135_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bahamian?" + 
                    "fields=_EM_62_XYZ_&" + 
                    "EMextraParam123=_EM_64_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_867_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/f?" + 
                    "fields=_EM_865_XYZ_&" + 
                    "EMextraParam123=_EM_866_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/mn?" + 
                    "fields=_EM_280_XYZ_&" + 
                    "EMextraParam123=_EM_282_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/kiR?fields=_EM_23701_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_161_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/northern%20america?EMextraParam123=_EM_160_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(61954.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BMD"))
                .body("[0].'currencies'[0].'name'", containsString("Bermudian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'translations'.'br'", containsString("Bermudas"))
                .body("[0].'translations'.'pt'", containsString("Bermudas"))
                .body("[0].'translations'.'nl'", containsString("Bermuda"))
                .body("[0].'translations'.'hr'", containsString("Bermudi"))
                .body("[0].'translations'.'fa'", containsString("برمودا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bmu.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BER"))
                .body("[1].'name'", containsString("United States Minor Outlying Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".us"))
                .body("[1].'alpha2Code'", containsString("UM"))
                .body("[1].'alpha3Code'", containsString("UMI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString(""))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("UM"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Northern America"))
                .body("[1].'population'", numberMatches(300.0))
                .body("[1].'latlng'.size()", equalTo(0))
                .body("[1].'demonym'", containsString("American"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(3))
                .body("[1].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("United States Minor Outlying Islands"))
                .body("[1].'numericCode'", containsString("581"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("USD"))
                .body("[1].'currencies'[0].'name'", containsString("United States Dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Kleinere Inselbesitzungen der Vereinigten Staaten"))
                .body("[1].'translations'.'es'", containsString("Islas Ultramarinas Menores de Estados Unidos"))
                .body("[1].'translations'.'fr'", containsString("Îles mineures éloignées des États-Unis"))
                .body("[1].'translations'.'ja'", containsString("合衆国領有小離島"))
                .body("[1].'translations'.'it'", containsString("Isole minori esterne degli Stati Uniti d'America"))
                .body("[1].'translations'.'br'", containsString("Ilhas Menores Distantes dos Estados Unidos"))
                .body("[1].'translations'.'pt'", containsString("Ilhas Menores Distantes dos Estados Unidos"))
                .body("[1].'translations'.'nl'", containsString("Kleine afgelegen eilanden van de Verenigde Staten"))
                .body("[1].'translations'.'hr'", containsString("Mali udaljeni otoci SAD-a"))
                .body("[1].'translations'.'fa'", containsString("جزایر کوچک حاشیه‌ای ایالات متحده آمریکا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/umi.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Canada"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ca"))
                .body("[2].'alpha2Code'", containsString("CA"))
                .body("[2].'alpha3Code'", containsString("CAN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Ottawa"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("CA"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Northern America"))
                .body("[2].'population'", numberMatches(3.6155487E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(60.0))
                .body("[2].'latlng'[1]", numberMatches(-95.0))
                .body("[2].'demonym'", containsString("Canadian"))
                .body("[2].'area'", numberMatches(9984670.0))
                .body("[2].'gini'", numberMatches(32.6))
                .body("[2].'timezones'.size()", equalTo(6))
                .body("[2].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00", "UTC-05:00", "UTC-04:00", "UTC-03:30"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("USA"))
                .body("[2].'nativeName'", containsString("Canada"))
                .body("[2].'numericCode'", containsString("124"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("CAD"))
                .body("[2].'currencies'[0].'name'", containsString("Canadian dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[2].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[2].'languages'[1].'name'", containsString("French"))
                .body("[2].'languages'[1].'nativeName'", containsString("français"))
                .body("[2].'translations'.'de'", containsString("Kanada"))
                .body("[2].'translations'.'es'", containsString("Canadá"))
                .body("[2].'translations'.'fr'", containsString("Canada"))
                .body("[2].'translations'.'ja'", containsString("カナダ"))
                .body("[2].'translations'.'it'", containsString("Canada"))
                .body("[2].'translations'.'br'", containsString("Canadá"))
                .body("[2].'translations'.'pt'", containsString("Canadá"))
                .body("[2].'translations'.'nl'", containsString("Canada"))
                .body("[2].'translations'.'hr'", containsString("Kanada"))
                .body("[2].'translations'.'fa'", containsString("کانادا"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/can.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("NAFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("North American Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Tratado de Libre Comercio de América del Norte", "Accord de Libre-échange Nord-Américain"))
                .body("[2].'cioc'", containsString("CAN"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/il?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Israel"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".il"))
                .body("'alpha2Code'", containsString("IL"))
                .body("'alpha3Code'", containsString("ISR"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("972"))
                .body("'capital'", containsString("Jerusalem"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("IL", "State of Israel", "Medīnat Yisrā'el"))
                .body("'region'", containsString("Asia"))
                .body("'subregion'", containsString("Western Asia"))
                .body("'population'", numberMatches(8527400.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(31.5))
                .body("'latlng'[1]", numberMatches(34.75))
                .body("'demonym'", containsString("Israeli"))
                .body("'area'", numberMatches(20770.0))
                .body("'gini'", numberMatches(39.2))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+02:00"))
                .body("'borders'.size()", equalTo(4))
                .body("'borders'", hasItems("EGY", "JOR", "LBN", "SYR"))
                .body("'nativeName'", containsString("יִשְׂרָאֵל"))
                .body("'numericCode'", containsString("376"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("ILS"))
                .body("'currencies'[0].'name'", containsString("Israeli new shekel"))
                .body("'currencies'[0].'symbol'", containsString("₪"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'[0].'iso639_1'", containsString("he"))
                .body("'languages'[0].'iso639_2'", containsString("heb"))
                .body("'languages'[0].'name'", containsString("Hebrew (modern)"))
                .body("'languages'[0].'nativeName'", containsString("עברית"))
                .body("'languages'[1].'iso639_1'", containsString("ar"))
                .body("'languages'[1].'iso639_2'", containsString("ara"))
                .body("'languages'[1].'name'", containsString("Arabic"))
                .body("'languages'[1].'nativeName'", containsString("العربية"))
                .body("'translations'.'de'", containsString("Israel"))
                .body("'translations'.'es'", containsString("Israel"))
                .body("'translations'.'fr'", containsString("Israël"))
                .body("'translations'.'ja'", containsString("イスラエル"))
                .body("'translations'.'it'", containsString("Israele"))
                .body("'translations'.'br'", containsString("Israel"))
                .body("'translations'.'pt'", containsString("Israel"))
                .body("'translations'.'nl'", containsString("Israël"))
                .body("'translations'.'hr'", containsString("Izrael"))
                .body("'translations'.'fa'", containsString("اسرائیل"))
                .body("'flag'", containsString("https://restcountries.eu/data/isr.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString("ISR"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_153_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CARICOM?fields=WSY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EAEU?" + 
                    "fields=_EM_621_XYZ_&" + 
                    "EMextraParam123=_EM_152_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/samoa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Samoa"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ws"))
                .body("[1].'alpha2Code'", containsString("WS"))
                .body("[1].'alpha3Code'", containsString("WSM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("685"))
                .body("[1].'capital'", containsString("Apia"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("WS", "Independent State of Samoa", "Malo Saʻoloto Tutoʻatasi o Sāmoa"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(187820.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-13.58333333))
                .body("[1].'latlng'[1]", numberMatches(-172.33333333))
                .body("[1].'demonym'", containsString("Samoan"))
                .body("[1].'area'", numberMatches(2842.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+13:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Samoa"))
                .body("[1].'numericCode'", containsString("882"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("WST"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("sm", "en"))
                .body("[1].'translations'.'de'", containsString("Samoa"))
                .body("[1].'translations'.'es'", containsString("Samoa"))
                .body("[1].'translations'.'fr'", containsString("Samoa"))
                .body("[1].'translations'.'ja'", containsString("サモア"))
                .body("[1].'translations'.'it'", containsString("Samoa"))
                .body("[1].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/kG?EMextraParam123=_EM_3630_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Kyrgyzstan"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".kg"))
                .body("'alpha2Code'", containsString("KG"))
                .body("'alpha3Code'", containsString("KGZ"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("996"))
                .body("'capital'", containsString("Bishkek"))
                .body("'altSpellings'.size()", equalTo(5))
                .body("'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("'region'", containsString("Asia"))
                .body("'subregion'", containsString("Central Asia"))
                .body("'population'", numberMatches(6047800.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(41.0))
                .body("'latlng'[1]", numberMatches(75.0))
                .body("'demonym'", containsString("Kirghiz"))
                .body("'area'", numberMatches(199951.0))
                .body("'gini'", numberMatches(36.2))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+06:00"))
                .body("'borders'.size()", equalTo(4))
                .body("'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("'nativeName'", containsString("Кыргызстан"))
                .body("'numericCode'", containsString("417"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("KGS"))
                .body("'currencies'[0].'name'", containsString("Kyrgyzstani som"))
                .body("'currencies'[0].'symbol'", containsString("с"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'[0].'iso639_1'", containsString("ky"))
                .body("'languages'[0].'iso639_2'", containsString("kir"))
                .body("'languages'[0].'name'", containsString("Kyrgyz"))
                .body("'languages'[0].'nativeName'", containsString("Кыргызча"))
                .body("'languages'[1].'iso639_1'", containsString("ru"))
                .body("'languages'[1].'iso639_2'", containsString("rus"))
                .body("'languages'[1].'name'", containsString("Russian"))
                .body("'languages'[1].'nativeName'", containsString("Русский"))
                .body("'translations'.'de'", containsString("Kirgisistan"))
                .body("'translations'.'es'", containsString("Kirguizistán"))
                .body("'translations'.'fr'", containsString("Kirghizistan"))
                .body("'translations'.'ja'", containsString("キルギス"))
                .body("'translations'.'it'", containsString("Kirghizistan"))
                .body("'translations'.'br'", containsString("Quirguistão"))
                .body("'translations'.'pt'", containsString("Quirguizistão"))
                .body("'translations'.'nl'", containsString("Kirgizië"))
                .body("'translations'.'hr'", containsString("Kirgistan"))
                .body("'translations'.'fa'", containsString("قرقیزستان"))
                .body("'flag'", containsString("https://restcountries.eu/data/kgz.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("EEU"))
                .body("'regionalBlocs'[0].'name'", containsString("Eurasian Economic Union"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'otherAcronyms'", hasItems("EAEU"))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("'cioc'", containsString("KGZ"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_252_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/CkD?fields=H7h01dUBrhuo3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=xq4V7%3BSi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0]", nullValue())
                .body("[1].'name'", containsString("Slovenia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".si"))
                .body("[1].'alpha2Code'", containsString("SI"))
                .body("[1].'alpha3Code'", containsString("SVN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("386"))
                .body("[1].'capital'", containsString("Ljubljana"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("SI", "Republic of Slovenia", "Republika Slovenija"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(2067683.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(46.11666666))
                .body("[1].'latlng'[1]", numberMatches(14.81666666))
                .body("[1].'demonym'", containsString("Slovene"))
                .body("[1].'area'", numberMatches(20273.0))
                .body("[1].'gini'", numberMatches(31.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("AUT", "HRV", "ITA", "HUN"))
                .body("[1].'nativeName'", containsString("Slovenija"))
                .body("[1].'numericCode'", containsString("705"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sl"))
                .body("[1].'translations'.'de'", containsString("Slowenien"))
                .body("[1].'translations'.'es'", containsString("Eslovenia"))
                .body("[1].'translations'.'fr'", containsString("Slovénie"))
                .body("[1].'translations'.'ja'", containsString("スロベニア"))
                .body("[1].'translations'.'it'", containsString("Slovenia"))
                .body("[1].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_208_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=vq4V7%3BSgp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0]", nullValue())
                .body("[1].'name'", containsString("Singapore"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sg"))
                .body("[1].'alpha2Code'", containsString("SG"))
                .body("[1].'alpha3Code'", containsString("SGP"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("65"))
                .body("[1].'capital'", containsString("Singapore"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("SG", "Singapura", "Republik Singapura", "新加坡共和国"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("South-Eastern Asia"))
                .body("[1].'population'", numberMatches(5469700.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(1.36666666))
                .body("[1].'latlng'[1]", numberMatches(103.8))
                .body("[1].'demonym'", containsString("Singaporean"))
                .body("[1].'area'", numberMatches(710.0))
                .body("[1].'gini'", numberMatches(48.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Singapore"))
                .body("[1].'numericCode'", containsString("702"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("SGD"))
                .body("[1].'languages'.size()", equalTo(4))
                .body("[1].'languages'", hasItems("en", "ms", "ta", "zh"))
                .body("[1].'translations'.'de'", containsString("Singapur"))
                .body("[1].'translations'.'es'", containsString("Singapur"))
                .body("[1].'translations'.'fr'", containsString("Singapour"))
                .body("[1].'translations'.'ja'", containsString("シンガポール"))
                .body("[1].'translations'.'it'", containsString("Singapore"))
                .body("[1].'relevance'", containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_715_XYZ_&" + 
                    "codes=jE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_413_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/argentine%20republic?" + 
                    "fields=_EM_410_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_267_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/pw?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pw"))
                .body("[0].'alpha2Code'", containsString("PW"))
                .body("[0].'alpha3Code'", containsString("PLW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("680"))
                .body("[0].'capital'", containsString("Ngerulmud"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(17950.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.5))
                .body("[0].'latlng'[1]", numberMatches(134.5))
                .body("[0].'demonym'", containsString("Palauan"))
                .body("[0].'area'", numberMatches(459.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Palau"))
                .body("[0].'numericCode'", containsString("585"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("(none)"))
                .body("[0].'currencies'[0].'name'", containsString("[E]"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("USD"))
                .body("[0].'currencies'[1].'name'", containsString("United States dollar"))
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Palau"))
                .body("[0].'translations'.'es'", containsString("Palau"))
                .body("[0].'translations'.'fr'", containsString("Palaos"))
                .body("[0].'translations'.'ja'", containsString("パラオ"))
                .body("[0].'translations'.'it'", containsString("Palau"))
                .body("[0].'translations'.'br'", containsString("Palau"))
                .body("[0].'translations'.'pt'", containsString("Palau"))
                .body("[0].'translations'.'nl'", containsString("Palau"))
                .body("[0].'translations'.'hr'", containsString("Palau"))
                .body("[0].'translations'.'fa'", containsString("پالائو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/plw.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("PLW"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/argentina?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_412_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.35904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ARS"))
                .body("[0].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[0].'languages'[1].'name'", containsString("Guaraní"))
                .body("[0].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'translations'.'br'", containsString("Argentina"))
                .body("[0].'translations'.'pt'", containsString("Argentina"))
                .body("[0].'translations'.'nl'", containsString("Argentinië"))
                .body("[0].'translations'.'hr'", containsString("Argentina"))
                .body("[0].'translations'.'fa'", containsString("آرژانتین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("ARG"));
        
    }


}
