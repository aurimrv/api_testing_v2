Do create a white box test suite in JUnit 4 and Java 8 using REST Assured to achieve full test coverage, including methods, lines, and all branches with all possible execution paths, according to the instructions delimited by %%%%%, which is part of the REST Java Application code delimited by *****. Use the Swagger documentation delimited by ##### to provide complementary information about the application. If an uncovered line is related to the <init> method (constructor), generate a test case that explicitly instantiates the class to ensure the constructor is executed. Your responses must contain only Java code in JUnit 4 format.

Follow these five instructions for this generated test code:

Instruction 1: Add this package line to generated test code file:
package eu.fayder.restcountries;

Instruction 2: Add the following Java imports to generated test code file:
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;

Instruction 3. Class Declaration: Create the class with the following declaration: gpt35_run01_CountryRestV1Test

Instruction 4: Create these variables in the generated test code:
private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5: Include the following setup and teardown methods in generated test code file:
@BeforeClass
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}


@AfterClass
public static void tearDown() {
    controller.stopSut();
}


@Before
public void initTest() {
    controller.resetStateOfSUT();
}

%%%%%
Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByAlpha
Lines: 48

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByAlphaList
Lines: 67, 70, 71, 72, 73

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByCurrency
Lines: 81, 90, 91, 92

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByName
Lines: 106, 107, 108

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByCallingCode
Lines: 122, 123, 124

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByCapital
Lines: 138, 139, 140

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByRegion
Lines: 154, 155, 156

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getBySubregion
Lines: 170, 171, 172

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: getByLanguage
Lines: 186, 187, 188

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: doPOST
Lines: 194, 195

Class name: eu/fayder/restcountries/v1/rest/CountryRestV1
Method: isEmpty
Lines: 207
%%%%%
*****
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
package eu.fayder.restcountries.v1.rest;

import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import eu.fayder.restcountries.domain.ResponseEntity;
import eu.fayder.restcountries.v1.domain.Country;
import org.apache.log4j.Logger;

import com.google.gson.Gson;
import org.springframework.stereotype.Component;

@Component
@Path("/v1")
@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
public class CountryRestV1 {

    private static final Logger LOG = Logger.getLogger(CountryRestV1.class);

    @GET
    @Path("all")
    public Object getAllCountries() {
        return this.getCountries();
    }

    @GET
    public Object getCountries() {
        LOG.info("Getting all");
        return CountryService.getInstance().getAll();
    }

    @GET
    @Path("alpha/{alphacode}")
    public Object getByAlpha(@PathParam("alphacode") String alpha) {
        LOG.info("Getting by alpha " + alpha);
        if (isEmpty(alpha) || alpha.length() < 2 || alpha.length() > 3) {
            return getResponse(Status.BAD_REQUEST);
        }
        Country country = CountryService.getInstance().getByAlpha(alpha);
        if (country != null) {
            return country;
        }
        return getResponse(Status.NOT_FOUND);
    }

    @GET
    @Path("alpha/")
    public Object getByAlphaList(@QueryParam("codes") String codes) {
        LOG.info("Getting by list " + codes);
        if (isEmpty(codes) || codes.length() < 2 || (codes.length() > 3 && !codes.contains(";"))) {
            return getResponse(Status.BAD_REQUEST);
        }
        try {
            List<Country> countries = CountryService.getInstance().getByCodeList(codes);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("currency/{currency}")
    public Object getByCurrency(@PathParam("currency") String currency) {
        LOG.info("Getting by currency " + currency);
        if (isEmpty(currency) || currency.length() != 3) {
            return getResponse(Status.BAD_REQUEST);
        }
        try {
            List<Country> countries = CountryService.getInstance().getByCurrency(currency);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("name/{name}")
    public Object getByName(@PathParam("name") String name, @QueryParam("fullText") boolean fullText) {
        LOG.info("Getting by name " + name);
        try {
            List<Country> countries = CountryService.getInstance().getByName(name, fullText);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("callingcode/{callingcode}")
    public Object getByCallingCode(@PathParam("callingcode") String callingcode) {
        LOG.info("Getting by calling code " + callingcode);
        try {
            List<Country> countries = CountryService.getInstance().getByCallingCode(callingcode);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("capital/{capital}")
    public Object getByCapital(@PathParam("capital") String capital) {
        LOG.info("Getting by capital " + capital);
        try {
            List<Country> countries = CountryService.getInstance().getByCapital(capital);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("region/{region}")
    public Object getByRegion(@PathParam("region") String region) {
        LOG.info("Getting by region " + region);
        try {
            List<Country> countries = CountryService.getInstance().getByRegion(region);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("subregion/{subregion}")
    public Object getBySubregion(@PathParam("subregion") String subregion) {
        LOG.info("Getting by region " + subregion);
        try {
            List<Country> countries = CountryService.getInstance().getBySubregion(subregion);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @GET
    @Path("lang/{lang}")
    public Object getByLanguage(@PathParam("lang") String language) {
        LOG.info("Getting by language " + language);
        try {
            List<Country> countries = CountryService.getInstance().getByLanguage(language);
            if (!countries.isEmpty()) {
                return countries;
            }
            return getResponse(Status.NOT_FOUND);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            return getResponse(Status.INTERNAL_SERVER_ERROR);
        }
    }

    @POST
    public Object doPOST() {
        LOG.info("Handling POST Request");
        return getResponse(Status.METHOD_NOT_ALLOWED);
    }

    private Response getResponse(Status status) {
        Gson gson = new Gson();
        return Response
                .status(status)
                .entity(gson.toJson(new ResponseEntity(status.getStatusCode(),
                        status.getReasonPhrase()))).build();
    }

    private boolean isEmpty(String value) {
        return value == null || value.isEmpty();
    }

}

*****
#####
openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/rest'
info:
  description: 'REST countries API'
  title: REST countries API
  version: v2.0.5
paths:
  /v1/all:
    get:
      operationId: v1All
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/alpha/{alphacode}:
    get:
      operationId: v1Alphacode
      parameters:
        - name: alphacode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/alpha:
    get:
      operationId: v1Alphacodes
      parameters:
        - name: codes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/currency/{currency}:
    get:
      operationId: v1Currency
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/name/{name}:
    get:
      operationId: v1Name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fullText
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/callingcode/{callingcode}:
    get:
      operationId: v1Callingcode
      parameters:
        - name: callingcode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/capital/{capital}:
    get:
      operationId: v1Capital
      parameters:
        - name: capital
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/region/{region}:
    get:
      operationId: v1Region
      parameters:
        - name: region
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/subregion/{subregion}:
    get:
      operationId: v1Subregion
      parameters:
        - name: subregion
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/lang/{lang}:
    get:
      operationId: v1Lang
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/all:
    get:
      operationId: v2All
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/alpha/{alphacode}:
    get:
      operationId: v2Alphacode
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: alphacode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/alpha:
    get:
      operationId: v2Alphacodes
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: codes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/currency/{currency}:
    get:
      operationId: v2Currency
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/name/{name}:
    get:
      operationId: v2Name
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fullText
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/callingcode/{callingcode}:
    get:
      operationId: v2Callingcode
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: callingcode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/capital/{capital}:
    get:
      operationId: v2Capital
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: capital
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/region/{region}:
    get:
      operationId: v2Region
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: region
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/subregion/{subregion}:
    get:
      operationId: v2Subregion
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: subregion
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/lang/{lang}:
    get:
      operationId: v2Lang
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/demonym/{demonym}:
    get:
      operationId: v2Demonym
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: demonym
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/regionalbloc/{regionalbloc}:
    get:
      operationId: v2Regionalbloc
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: regionalbloc
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
components:
  schemas: { }
#####
