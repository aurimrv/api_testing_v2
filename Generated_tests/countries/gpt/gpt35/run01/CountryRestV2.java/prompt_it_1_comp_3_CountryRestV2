You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Do fix the compilation errors delimited by ##### given the code below delimited by *****.

The response must contain only Java code in JUnit 4 format.

#####
[[1;31mERROR[m] COMPILATION ERROR : 
[[1;31mERROR[m] /media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/restcountries/src/test/java/eu/fayder/restcountries/gpt35_run01_CountryRestV2Test.java:[201,29] cannot find symbol
  symbol:   class CountryRestV2
  location: class eu.fayder.restcountries.gpt35_run01_CountryRestV2Test
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-compiler-plugin:3.8.0:testCompile[m [1m(default-testCompile)[m on project [36mrestcountries[m: [1;31mCompilation failure[m
[[1;31mERROR[m] [1;31m/media/rincon/63999417195/eclipse-workspace/EMB-master/jdk_8_maven/cs/rest/original/restcountries/src/test/java/eu/fayder/restcountries/gpt35_run01_CountryRestV2Test.java:[201,29] cannot find symbol[m
[[1;31mERROR[m] [1;31m  symbol:   class CountryRestV2[m
[[1;31mERROR[m] [1;31m  location: class eu.fayder.restcountries.gpt35_run01_CountryRestV2Test[m
[[1;31mERROR[m] [1;31m[m
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

#####
*****

package eu.fayder.restcountries;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class gpt35_run01_CountryRestV2Test {

    private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }

    @Test
    public void testGetByAlpha() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/alpha/USA?fields=name;alpha2Code")
            .then()
            .statusCode(200)
            .body("name", equalTo("United States of America"))
            .body("alpha2Code", equalTo("US"));
    }

    @Test
    public void testGetByAlphaList() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/alpha/?codes=USA;CAN;MEX&fields=name;alpha2Code")
            .then()
            .statusCode(200)
            .body("name", hasItems("United States of America", "Canada", "Mexico"))
            .body("alpha2Code", hasItems("US", "CA", "MX"));
    }

    @Test
    public void testGetByCurrency() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/currency/USD?fields=name;capital")
            .then()
            .statusCode(200)
            .body("name", equalTo("United States of America"))
            .body("capital", equalTo("Washington, D.C."));
    }

    @Test
    public void testGetByName() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/name/Canada?fullText=true&fields=name;region")
            .then()
            .statusCode(200)
            .body("name", equalTo("Canada"))
            .body("region", equalTo("Americas"));
    }

    @Test
    public void testGetByCallingCode() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/callingcode/1?fields=name;languages")
            .then()
            .statusCode(200)
            .body("name", equalTo("Canada"))
            .body("languages", hasItem("English"));
    }

    @Test
    public void testGetByCapital() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/capital/Washington?fields=name;region")
            .then()
            .statusCode(200)
            .body("name", equalTo("United States of America"))
            .body("region", equalTo("Americas"));
    }

    @Test
    public void testGetByRegion() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/region/Africa?fields=name;capital")
            .then()
            .statusCode(200)
            .body("name", hasItem("Nigeria"))
            .body("capital", hasItem("Abuja"));
    }

    @Test
    public void testGetBySubRegion() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/subregion/Southern%20Europe?fields=name;capital")
            .then()
            .statusCode(200)
            .body("name", hasItem("Italy"))
            .body("capital", hasItem("Rome"));
    }

    @Test
    public void testGetByLanguage() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/lang/French?fields=name;region")
            .then()
            .statusCode(200)
            .body("name", hasItem("France"))
            .body("region", hasItem("Europe"));
    }

    @Test
    public void testGetByDemonym() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/demonym/French?fields=name;capital")
            .then()
            .statusCode(200)
            .body("name", hasItem("France"))
            .body("capital", hasItem("Paris"));
    }

    @Test
    public void testGetByRegionalBloc() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .get("/v2/regionalbloc/EU?fields=name;capital")
            .then()
            .statusCode(200)
            .body("name", hasItem("Germany"))
            .body("capital", hasItem("Berlin"));
    }

    @Test
    public void testDoPOST() {
        given()
            .baseUri(baseUrlOfSut)
            .when()
            .post("/v2")
            .then()
            .statusCode(405);
    }

    @Test
    public void testIsEmpty() {
        boolean empty = new CountryRestV2().isEmpty("");
        assertTrue(empty);
    }
}

*****
