Do create a white box test suite in JUnit 4 and Java 8 using REST Assured to achieve full test coverage, including methods, lines, and all branches with all possible execution paths, according to the instructions delimited by %%%%%, which is part of the REST Java Application code delimited by *****. Use the Swagger documentation delimited by ##### to provide complementary information about the application. If an uncovered line is related to the <init> method (constructor), generate a test case that explicitly instantiates the class to ensure the constructor is executed. Your responses must contain only Java code in JUnit 4 format.

Follow these five instructions for this generated test code:

Instruction 1: Add this package line to generated test code file:
package eu.fayder.restcountries;

Instruction 2: Add the following Java imports to generated test code file:
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;

Instruction 3. Class Declaration: Create the class with the following declaration: gpt35_run01_CountryServiceBaseTest

Instruction 4: Create these variables in the generated test code:
private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5: Include the following setup and teardown methods in generated test code file:
@BeforeClass
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}


@AfterClass
public static void tearDown() {
    controller.stopSut();
}


@Before
public void initTest() {
    controller.resetStateOfSUT();
}

%%%%%
Class name: eu/fayder/restcountries/rest/CountryServiceBase
Method: getByCodeList
Lines: 41

Class name: eu/fayder/restcountries/rest/CountryServiceBase
Method: fulltextSearch
Lines: 112

Class name: eu/fayder/restcountries/rest/CountryServiceBase
Method: loadJson
Lines: 157, 158
%%%%%
*****
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
package eu.fayder.restcountries.rest;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import eu.fayder.restcountries.domain.BaseCountry;
import eu.fayder.restcountries.domain.ICountryRestSymbols;
import org.apache.log4j.Logger;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CountryServiceBase {

    private static final Logger LOG = Logger.getLogger(CountryServiceBase.class);

    protected <T extends BaseCountry> T getByAlpha(String alpha, List<T> countries) {
        int alphaLength = alpha.length();
        for (T country : countries) {
            if (alphaLength == 2) {
                if (country.getAlpha2Code().toLowerCase().equals(alpha.toLowerCase())) {
                    return country;
                }
            } else if (alphaLength == 3) {
                if (country.getAlpha3Code().toLowerCase().equals(alpha.toLowerCase())) {
                    return country;
                }
            }
        }
        return null;
    }

    protected List<? extends BaseCountry> getByCodeList(String codeList, List<? extends BaseCountry> countries) {
        List<BaseCountry> result = new ArrayList<>();
        if(codeList == null) return result;

        List<String> codes = Arrays.asList(codeList.split(ICountryRestSymbols.SEMICOLON));
        for(String code : codes) {
            BaseCountry country = getByAlpha(code, countries);
            if(!result.contains(country))
                result.add(country);
        }
        return result;
    }

    protected List<? extends BaseCountry> getByName(String name, boolean fullText, List<? extends BaseCountry> countries) {
        if(fullText) {
            return fulltextSearch(name, countries);
        } else {
            return substringSearch(name, countries);
        }
    }

    protected List<? extends BaseCountry> getByCallingCode(String callingCode, List<? extends BaseCountry> countries) {
        List<BaseCountry> result = new ArrayList<>();
        for(BaseCountry country : countries) {
            for(String c : country.getCallingCodes()) {
                if(c.equals(callingCode))
                    result.add(country);
            }
        }
        return result;
    }

    protected List<? extends BaseCountry> getByCapital(String capital, List<? extends BaseCountry> countries) {
        List<BaseCountry> result = new ArrayList<>();
        for(BaseCountry country : countries) {
            if(normalize(country.getCapital().toLowerCase()).contains(normalize(capital.toLowerCase()))) {
                result.add(country);
            }
        }
        return result;
    }

    protected List<? extends BaseCountry> getByRegion(String region, List<? extends BaseCountry> countries) {
        List<BaseCountry> result = new ArrayList<>();
        for(BaseCountry country : countries) {
            if(country.getRegion().toLowerCase().equals(region.toLowerCase())) {
                result.add(country);
            }
        }
        return result;
    }

    protected List<? extends BaseCountry> getBySubregion(String subregion, List<? extends BaseCountry> countries) {
        List<BaseCountry> result = new ArrayList<>();
        for(BaseCountry country : countries) {
            if(country.getSubregion().toLowerCase().equals(subregion.toLowerCase())) {
                result.add(country);
            }
        }
        return result;
    }

    private List<? extends BaseCountry> fulltextSearch(String name, List<? extends BaseCountry> countries) {
        // Using 2 different 'for' loops to give priority to 'name' matches over alternative spellings
        List<BaseCountry> result = new ArrayList<>();
        for (BaseCountry country : countries) {
            if (normalize(country.getName().toLowerCase()).equals(normalize(name.toLowerCase()))) {
                result.add(country);
            }
        }
        for (BaseCountry country : countries) {
            for (String alternative : country.getAltSpellings()) {
                if (normalize(alternative.toLowerCase()).equals(normalize(name.toLowerCase()))
                        && !result.contains(country)) {
                    result.add(country);
                }
            }
        }
        return result;
    }

    private List<? extends BaseCountry> substringSearch(String name, List<? extends BaseCountry> countries) {
        // Using 2 different 'for' loops to give priority to 'name' matches over alternative spellings
        List<BaseCountry> result = new ArrayList<>();
        for(BaseCountry country : countries) {
            if(normalize(country.getName().toLowerCase()).contains(normalize(name.toLowerCase()))) {
                result.add(country);
            }
        }
        for(BaseCountry country : countries) {
            for (String alternative : country.getAltSpellings()) {
                if( normalize(alternative.toLowerCase()).contains(normalize(name.toLowerCase()))
                        && !result.contains(country) ) {
                    result.add(country);
                }
            }
        }
        return result;
    }

    protected String normalize(String string) {
        return Normalizer.normalize(string, Normalizer.Form.NFD)
                .replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
    }

    protected List<? extends BaseCountry> loadJson(String filename, Class<? extends BaseCountry> clazz) {
        LOG.debug("Loading JSON " + filename);
        List<BaseCountry> countries = new ArrayList<>();
        InputStream is = CountryServiceBase.class.getClassLoader().getResourceAsStream(filename);
        Gson gson = new Gson();
        JsonReader reader;
        try {
            reader = new JsonReader(new InputStreamReader(is, "UTF-8"));
            reader.beginArray();
            while(reader.hasNext()) {
                BaseCountry country = gson.fromJson(reader, clazz);
                countries.add(country);
            }
        } catch (Exception e) {
            LOG.error("Could not load JSON " + filename);
        }
        return countries;
    }
}

*****
#####
openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/rest'
info:
  description: 'REST countries API'
  title: REST countries API
  version: v2.0.5
paths:
  /v1/all:
    get:
      operationId: v1All
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/alpha/{alphacode}:
    get:
      operationId: v1Alphacode
      parameters:
        - name: alphacode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/alpha:
    get:
      operationId: v1Alphacodes
      parameters:
        - name: codes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/currency/{currency}:
    get:
      operationId: v1Currency
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/name/{name}:
    get:
      operationId: v1Name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fullText
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/callingcode/{callingcode}:
    get:
      operationId: v1Callingcode
      parameters:
        - name: callingcode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/capital/{capital}:
    get:
      operationId: v1Capital
      parameters:
        - name: capital
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/region/{region}:
    get:
      operationId: v1Region
      parameters:
        - name: region
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/subregion/{subregion}:
    get:
      operationId: v1Subregion
      parameters:
        - name: subregion
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v1/lang/{lang}:
    get:
      operationId: v1Lang
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/all:
    get:
      operationId: v2All
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/alpha/{alphacode}:
    get:
      operationId: v2Alphacode
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: alphacode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/alpha:
    get:
      operationId: v2Alphacodes
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: codes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/currency/{currency}:
    get:
      operationId: v2Currency
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/name/{name}:
    get:
      operationId: v2Name
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fullText
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/callingcode/{callingcode}:
    get:
      operationId: v2Callingcode
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: callingcode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/capital/{capital}:
    get:
      operationId: v2Capital
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: capital
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/region/{region}:
    get:
      operationId: v2Region
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: region
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/subregion/{subregion}:
    get:
      operationId: v2Subregion
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: subregion
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/lang/{lang}:
    get:
      operationId: v2Lang
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/demonym/{demonym}:
    get:
      operationId: v2Demonym
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: demonym
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
  /v2/regionalbloc/{regionalbloc}:
    get:
      operationId: v2Regionalbloc
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: regionalbloc
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        default:
          description: Other responses
components:
  schemas: { }
#####
