package em.embedded.market; //SEED 01

import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T16:15:20.845-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 271
 * <br>
 * Used time: 1h 0m 6s
 * <br>
 * Needed budget for current results: 90%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class seed01_EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","USER_ROLE","CUSTOMER_ORDER","CART_ITEM","PRODUCT"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"media\": \"nxISGe\", " + 
                    " \"name\": \"_cqmEMZySC39YL\", " + 
                    " \"profile\": \"T_Y7\", " + 
                    " \"title\": \"jT5zppGP_0\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"ucUS_w\", " + 
                    " \"href\": \"g37MRHEqB\", " + 
                    " \"hreflang\": \"Gdj\", " + 
                    " \"media\": \"JiCUlP7D\", " + 
                    " \"profile\": \"AMDl3PNSZBju\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"\", " + 
                    " \"href\": \"Uz2\", " + 
                    " \"media\": \"eGXwcJ\", " + 
                    " \"name\": \"FJeCF3C4LV0nM\", " + 
                    " \"profile\": \"GzF9Y8kM6f\", " + 
                    " \"rel\": { " + 
                    " \"3\": \"tt9M1N9ZJ3lncf4P\" " + 
                    " }, " + 
                    " \"title\": \"38\", " + 
                    " \"type\": \"_EM_9770_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"J0WitU_pYCwUkie0\", " + 
                    " \"name\": \"TgGSt\", " + 
                    " \"rel\": { " + 
                    " \"GBubsup5Ij\": \"_EM_9771_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_9772_XYZ_\", " + 
                    " \"type\": \"VowRHVEpWX\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"v\", " + 
                    " \"hreflang\": \"v6ARZywiPdq\", " + 
                    " \"name\": \"Ey9wyiXIINAEmy\", " + 
                    " \"profile\": \"n0uxXdPtz14kFm\", " + 
                    " \"title\": \"0rf0jCHMF\", " + 
                    " \"type\": \"TS8BG6dPkO8\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"Qo6H\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_293_XYZ_&" + 
                    "EMextraParam123=_EM_294_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"hreflang\": \"QOAqXuydknt\", " + 
                    " \"media\": \"18Kn4VWJf\", " + 
                    " \"profile\": \"e8V8iO_g\", " + 
                    " \"rel\": { " + 
                    " \"II0TER\": \"SUrdyeE3V\", " + 
                    " \"PV\": \"wWPC8YE\", " + 
                    " \"\": \"WAZRx\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"Skq\", " + 
                    " \"href\": \"so\", " + 
                    " \"media\": \"\", " + 
                    " \"name\": \"c6uMg4as\", " + 
                    " \"rel\": {} " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"GjBlY9It\", " + 
                    " \"hreflang\": \"z2P5NA\", " + 
                    " \"media\": \"V_kVqX8l0nHv\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"Rbaszxm47\", " + 
                    " \"hreflang\": \"4F9816\", " + 
                    " \"name\": \"UZBLlF0hYzin\", " + 
                    " \"profile\": \"PzOmi2bzyeyzmUIz\", " + 
                    " \"type\": \"3JK4dZ\" " + 
                    " }, " + 
                    " { " + 
                    " \"media\": \"p5NMc4qQ\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 873 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=1CNaS0I6gdl&" + 
                    "included=LyMdZL_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 335L)
                .d("TOTAL_ITEMS", "-4193546")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 336L)
                .d("TOTAL_ITEMS", "-7256")
                .d("PRODUCTS_COST", "-65536")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 337L)
                .d("TOTAL_ITEMS", "8388608")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 338L)
                .d("PHONE", "\"ewm1M9QLwqZ\"")
                .d("ADDRESS", "\"_EM_2319_XYZ_\"")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CONTACTS", 339L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"GLbS7rRFr\"")
                .d("CITY_REGION", "\"_EM_7332_XYZ_\"")
            .and().insertInto("CONTACTS", 340L)
                .d("PHONE", "\"CpknWtK8tg33N\"")
                .d("ADDRESS", "\"_EM_7328_XYZ_\"")
                .d("CITY_REGION", "\"2019-12-27\"")
            .and().insertInto("USER_ROLE", 341L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 342L)
                .d("ID", "-519913837")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"2049-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "131927")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 343L)
                .d("ID", "262648")
                .d("USER_ACCOUNT_ID", "524785")
                .d("DATE_CREATED", "\"2043-06-25\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "2")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "4096")
            .and().insertInto("CUSTOMER_ORDER", 344L)
                .d("ID", "-4193628")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1999-08-07\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "2")
            .and().insertInto("CUSTOMER_ORDER", 345L)
                .d("ID", "12583904")
                .d("USER_ACCOUNT_ID", "31744")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 346L)
                .d("ID", "2250")
                .d("USER_ACCOUNT_ID", "-4194299")
                .d("DATE_CREATED", "\"1982-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "262144")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-2087541")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_1300_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"profile\": \"_EM_1264_XYZ_\", " + 
                    " \"type\": \"_EM_1274_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_1275_XYZ_\", " + 
                    " \"href\": \"_EM_1276_XYZ_\", " + 
                    " \"media\": \"_EM_1278_XYZ_\", " + 
                    " \"profile\": \"_EM_1280_XYZ_\", " + 
                    " \"rel\": {} " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_1282_XYZ_\", " + 
                    " \"href\": \"_EM_1283_XYZ_\", " + 
                    " \"hreflang\": \"_EM_1284_XYZ_\", " + 
                    " \"media\": \"_EM_1285_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"_EM_1297_XYZ_\", " + 
                    " \"email\": \"BwIOTLpHFaeE\", " + 
                    " \"name\": \"p \u0027\", " + 
                    " \"password\": \"i\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?name=_EM_300_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 225L)
                .d("USER_ID", "425")
                .d("ROLE_ID", "33438")
            .and().insertInto("USER_ROLE", 226L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-33554432")
            .and().insertInto("CUSTOMER_ORDER", 227L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1977-09-09\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "497")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "247")
            .and().insertInto("CUSTOMER_ORDER", 228L)
                .d("ID", "1048992")
                .d("USER_ACCOUNT_ID", "746")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "128")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 229L)
                .d("ID", "-67108185")
                .d("USER_ACCOUNT_ID", "815")
                .d("DATE_CREATED", "\"1999-12-08\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2031924570")
            .and().insertInto("CART_ITEM", 1571L)
                .d("CART_ID", "970")
                .d("PRODUCT_ID", "0")
                .d("QUANTITY", "0")
            .and().insertInto("PRODUCT", 214L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "-130290")
                .d("AGE", "1060")
                .d("ALCOHOL", "0.08309524891070652")
                .d("VOLUME", "-8033")
                .d("PRICE", "0.9180783293588286")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_1164_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/0")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 335L)
                .d("TOTAL_ITEMS", "-4193546")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 336L)
                .d("TOTAL_ITEMS", "-7256")
                .d("PRODUCTS_COST", "-65536")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 337L)
                .d("TOTAL_ITEMS", "8388608")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 338L)
                .d("PHONE", "\"ewm1M9QLwqZ\"")
                .d("ADDRESS", "\"_EM_2319_XYZ_\"")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CONTACTS", 339L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"GLbS7rRFr\"")
                .d("CITY_REGION", "\"_EM_7332_XYZ_\"")
            .and().insertInto("CONTACTS", 340L)
                .d("PHONE", "\"CpknWtK8tg33N\"")
                .d("ADDRESS", "\"_EM_7328_XYZ_\"")
                .d("CITY_REGION", "\"2019-12-27\"")
            .and().insertInto("USER_ROLE", 341L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 342L)
                .d("ID", "-519913837")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"2049-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "131927")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 343L)
                .d("ID", "262648")
                .d("USER_ACCOUNT_ID", "524785")
                .d("DATE_CREATED", "\"2043-06-25\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "2")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "4096")
            .and().insertInto("CUSTOMER_ORDER", 344L)
                .d("ID", "-4193628")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1999-08-07\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "2")
            .and().insertInto("CUSTOMER_ORDER", 345L)
                .d("ID", "12583904")
                .d("USER_ACCOUNT_ID", "31744")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 346L)
                .d("ID", "2250")
                .d("USER_ACCOUNT_ID", "-4194299")
                .d("DATE_CREATED", "\"1982-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "262144")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-2087541")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_1311_XYZ_")
                .get(baseUrlOfSut + "/customer/orders?name=SdRRLDYZMWFSpZv")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_18_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
