package em.embedded.market; //SEED 01

import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T16:15:21.028-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 18 tests
 * <br>
 * Covered targets: 333
 * <br>
 * Used time: 1h 0m 6s
 * <br>
 * Needed budget for current results: 90%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class seed01_EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","CART_ITEM","PRODUCT","CART","CONTACTS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=_EM_16_XYZ_&" + 
                    "EMextraParam123=_EM_17_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/customer/cart?name=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts?name=_EM_8_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_80_XYZ_")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=_EM_78_XYZ_&" + 
                    "EMextraParam123=_EM_79_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 1355462092, " + 
                    " \"quantity\": 972 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 225L)
                .d("USER_ID", "-67108439")
                .d("ROLE_ID", "0")
            .and().insertInto("USER_ROLE", 226L)
                .d("USER_ID", "-1200616474")
                .d("ROLE_ID", "32768")
            .and().insertInto("CUSTOMER_ORDER", 227L)
                .d("ID", "391")
                .d("USER_ACCOUNT_ID", "928")
                .d("DATE_CREATED", "\"1977-09-09\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 228L)
                .d("ID", "256")
                .d("USER_ACCOUNT_ID", "1002")
                .d("DATE_CREATED", "\"1936-10-29\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "695")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "470")
            .and().insertInto("CUSTOMER_ORDER", 229L)
                .d("ID", "679")
                .d("USER_ACCOUNT_ID", "815")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "2040313178")
            .and().insertInto("CART_ITEM", 1571L)
                .d("CART_ID", "4")
                .d("PRODUCT_ID", "8404625970866924861")
                .d("QUANTITY", "4188")
            .and().insertInto("PRODUCT", 214L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "782")
                .d("AGE", "-32647")
                .d("ALCOHOL", "-5.219514170137982")
                .d("VOLUME", "1183")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"twkfGVFoRI7g\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_1164_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/396")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer/orders/396"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/customer/cart?name=")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer/cart"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 5635L)
                .d("USER_ID", "503")
                .d("ROLE_ID", "846")
            .and().insertInto("USER_ROLE", 5636L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "581")
            .and().insertInto("USER_ROLE", 5637L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-1817044327")
            .and().insertInto("USER_ROLE", 5638L)
                .d("USER_ID", "915")
                .d("ROLE_ID", "259")
            .and().insertInto("USER_ROLE", 5639L)
                .d("USER_ID", "685")
                .d("ROLE_ID", "670")
            .and().insertInto("CART_ITEM", 5641L)
                .d("CART_ID", "189")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "112")
            .and().insertInto("CART_ITEM", 5642L)
                .d("CART_ID", "4")
                .d("PRODUCT_ID", "346")
                .d("QUANTITY", "578")
            .and().insertInto("PRODUCT", 5866L)
                .d("NAME", "\"Rk4hO7TiTM\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "639")
                .d("ALCOHOL", "0.7198628498828303")
                .d("VOLUME", "-1532047026")
                .d("PRICE", "2.050807110363431")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5867L)
                .d("NAME", "\"\"")
                .d("DISTILLERY_ID", "387")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7280417888436009")
                .d("VOLUME", "943")
                .d("PRICE", "0.9170162457102099")
                .d("DESCRIPTION", "\"dvgA_1rhJ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5868L)
                .d("NAME", "\"93hIGWPc\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "397")
                .d("ALCOHOL", "0.2403957980516197")
                .d("VOLUME", "665")
                .d("PRICE", "0.4724686562298116")
                .d("DESCRIPTION", "\"EsQOVMbcCwQS\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5869L)
                .d("NAME", "\"hPx\"")
                .d("DISTILLERY_ID", "550")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.9469478440351208")
                .d("VOLUME", "716")
                .d("PRICE", "0.3889173849322274")
                .d("DESCRIPTION", "\"F4aGpuGS5L\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5870L)
                .d("NAME", "\"D0CW7T\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7685521631906238")
                .d("VOLUME", "580")
                .d("PRICE", "0.6231166131370992")
                .d("DESCRIPTION", "\"zQw\"")
                .d("AVAILABLE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?included=naLMQIhdy")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer/orders"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 225L)
                .d("USER_ID", "-67108439")
                .d("ROLE_ID", "0")
            .and().insertInto("USER_ROLE", 226L)
                .d("USER_ID", "-1200616474")
                .d("ROLE_ID", "32768")
            .and().insertInto("CUSTOMER_ORDER", 227L)
                .d("ID", "391")
                .d("USER_ACCOUNT_ID", "928")
                .d("DATE_CREATED", "\"1977-09-09\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 228L)
                .d("ID", "256")
                .d("USER_ACCOUNT_ID", "1002")
                .d("DATE_CREATED", "\"1936-10-29\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "695")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "470")
            .and().insertInto("CUSTOMER_ORDER", 229L)
                .d("ID", "679")
                .d("USER_ACCOUNT_ID", "815")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "2040313178")
            .and().insertInto("CART_ITEM", 1571L)
                .d("CART_ID", "4")
                .d("PRODUCT_ID", "8404625970866924861")
                .d("QUANTITY", "4188")
            .and().insertInto("PRODUCT", 214L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "782")
                .d("AGE", "-32647")
                .d("ALCOHOL", "-5.219514170137982")
                .d("VOLUME", "1183")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"twkfGVFoRI7g\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?" + 
                    "name=_EM_5352_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer/cart/pay"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 5635L)
                .d("USER_ID", "503")
                .d("ROLE_ID", "846")
            .and().insertInto("USER_ROLE", 5636L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "581")
            .and().insertInto("USER_ROLE", 5637L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-1817044327")
            .and().insertInto("USER_ROLE", 5638L)
                .d("USER_ID", "915")
                .d("ROLE_ID", "259")
            .and().insertInto("USER_ROLE", 5639L)
                .d("USER_ID", "685")
                .d("ROLE_ID", "670")
            .and().insertInto("CART_ITEM", 5641L)
                .d("CART_ID", "189")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "112")
            .and().insertInto("CART_ITEM", 5642L)
                .d("CART_ID", "4")
                .d("PRODUCT_ID", "346")
                .d("QUANTITY", "578")
            .and().insertInto("PRODUCT", 5866L)
                .d("NAME", "\"Rk4hO7TiTM\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "639")
                .d("ALCOHOL", "0.7198628498828303")
                .d("VOLUME", "-1532047026")
                .d("PRICE", "2.050807110363431")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5867L)
                .d("NAME", "\"\"")
                .d("DISTILLERY_ID", "387")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7280417888436009")
                .d("VOLUME", "943")
                .d("PRICE", "0.9170162457102099")
                .d("DESCRIPTION", "\"dvgA_1rhJ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5868L)
                .d("NAME", "\"93hIGWPc\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "397")
                .d("ALCOHOL", "0.2403957980516197")
                .d("VOLUME", "665")
                .d("PRICE", "0.4724686562298116")
                .d("DESCRIPTION", "\"EsQOVMbcCwQS\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5869L)
                .d("NAME", "\"hPx\"")
                .d("DISTILLERY_ID", "550")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.9469478440351208")
                .d("VOLUME", "716")
                .d("PRICE", "0.3889173849322274")
                .d("DESCRIPTION", "\"F4aGpuGS5L\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5870L)
                .d("NAME", "\"D0CW7T\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7685521631906238")
                .d("VOLUME", "580")
                .d("PRICE", "0.6231166131370992")
                .d("DESCRIPTION", "\"zQw\"")
                .d("AVAILABLE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"g9z\", " + 
                    " \"email\": \"ZhMvkhJJ2ShGaQRD\", " + 
                    " \"name\": \"  \u0027\", " + 
                    " \"password\": \"X\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/register"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 5635L)
                .d("USER_ID", "503")
                .d("ROLE_ID", "846")
            .and().insertInto("USER_ROLE", 5636L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "581")
            .and().insertInto("USER_ROLE", 5637L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-1817044327")
            .and().insertInto("USER_ROLE", 5638L)
                .d("USER_ID", "915")
                .d("ROLE_ID", "259")
            .and().insertInto("USER_ROLE", 5639L)
                .d("USER_ID", "685")
                .d("ROLE_ID", "670")
            .and().insertInto("CART_ITEM", 5641L)
                .d("CART_ID", "189")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "112")
            .and().insertInto("CART_ITEM", 5642L)
                .d("CART_ID", "4")
                .d("PRODUCT_ID", "346")
                .d("QUANTITY", "578")
            .and().insertInto("PRODUCT", 5866L)
                .d("NAME", "\"Rk4hO7TiTM\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "639")
                .d("ALCOHOL", "0.7198628498828303")
                .d("VOLUME", "-1532047026")
                .d("PRICE", "2.050807110363431")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5867L)
                .d("NAME", "\"\"")
                .d("DISTILLERY_ID", "387")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7280417888436009")
                .d("VOLUME", "943")
                .d("PRICE", "0.9170162457102099")
                .d("DESCRIPTION", "\"dvgA_1rhJ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5868L)
                .d("NAME", "\"93hIGWPc\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "397")
                .d("ALCOHOL", "0.2403957980516197")
                .d("VOLUME", "665")
                .d("PRICE", "0.4724686562298116")
                .d("DESCRIPTION", "\"EsQOVMbcCwQS\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 5869L)
                .d("NAME", "\"hPx\"")
                .d("DISTILLERY_ID", "550")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.9469478440351208")
                .d("VOLUME", "716")
                .d("PRICE", "0.3889173849322274")
                .d("DESCRIPTION", "\"F4aGpuGS5L\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 5870L)
                .d("NAME", "\"D0CW7T\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7685521631906238")
                .d("VOLUME", "580")
                .d("PRICE", "0.6231166131370992")
                .d("DESCRIPTION", "\"zQw\"")
                .d("AVAILABLE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"qR1oMtUwl4e\", " + 
                    " \"href\": \"kUsjzGtZD9xA\", " + 
                    " \"hreflang\": \"asxa3yi8kHfbn\", " + 
                    " \"profile\": \"pu\", " + 
                    " \"rel\": { " + 
                    " \"R6nqKehgm_TONDg\": \"NCmROrc7vE6m0U\", " + 
                    " \"oRRPKTN\": \"_1Vy_\", " + 
                    " \"q1LHx5xGo\": \"5\", " + 
                    " \"Im0XTeN\": \"1TNkrHLNfEiXnRA\", " + 
                    " \"EDlmFPPNu\": \"7tX0dL9j2QfWEnK\" " + 
                    " }, " + 
                    " \"title\": \"4Npmrxsh00IPZvd\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"zDAYrJYE\", " + 
                    " \"media\": \"9wHNrfqpsVq\", " + 
                    " \"name\": \"YT6K1j_B\", " + 
                    " \"profile\": \"nn6HmhXZ\", " + 
                    " \"type\": \"8wgtURCgq0xLIwQ\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"\", " + 
                    " \"title\": \"31v_2rpqIMeWS\", " + 
                    " \"type\": \"KbLsDsk4Mijvi7\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"BShgkDJZrDxNPCY\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer/contacts"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/234")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/234"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/533?name=_EM_444_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/533"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 286, " + 
                    " \"quantity\": 575 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_1397_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_187_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_129_XYZ_&" + 
                    "EMextraParam123=_EM_186_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("address"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_564_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 676 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("quantity"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 335L)
                .d("TOTAL_ITEMS", "-4193546")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 336L)
                .d("TOTAL_ITEMS", "-7256")
                .d("PRODUCTS_COST", "-65536")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 337L)
                .d("TOTAL_ITEMS", "8388608")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 338L)
                .d("PHONE", "\"ewm1M9QLwqZ\"")
                .d("ADDRESS", "\"_EM_2319_XYZ_\"")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CONTACTS", 339L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"GLbS7rRFr\"")
                .d("CITY_REGION", "\"_EM_7332_XYZ_\"")
            .and().insertInto("CONTACTS", 340L)
                .d("PHONE", "\"CpknWtK8tg33N\"")
                .d("ADDRESS", "\"_EM_7328_XYZ_\"")
                .d("CITY_REGION", "\"2019-12-27\"")
            .and().insertInto("USER_ROLE", 341L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 342L)
                .d("ID", "-519913837")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"2049-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "131927")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 343L)
                .d("ID", "262648")
                .d("USER_ACCOUNT_ID", "524785")
                .d("DATE_CREATED", "\"2043-06-25\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "2")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "4096")
            .and().insertInto("CUSTOMER_ORDER", 344L)
                .d("ID", "-4193628")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1999-08-07\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "2")
            .and().insertInto("CUSTOMER_ORDER", 345L)
                .d("ID", "12583904")
                .d("USER_ACCOUNT_ID", "31744")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 346L)
                .d("ID", "2250")
                .d("USER_ACCOUNT_ID", "-4194299")
                .d("DATE_CREATED", "\"1982-08-16\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "262144")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-2087541")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?EMextraParam123=_EM_1302_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[2].'message'", containsString("Not a valid credit card number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_17() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 8428L)
                .d("USER_ID", "341")
                .d("ROLE_ID", "NULL")
            .and().insertInto("USER_ROLE", 8429L)
                .d("USER_ID", "108")
                .d("ROLE_ID", "NULL")
            .and().insertInto("USER_ROLE", 8430L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "353")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"WvkyJ\", " + 
                    " \"name\": \"-  \" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("email"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
