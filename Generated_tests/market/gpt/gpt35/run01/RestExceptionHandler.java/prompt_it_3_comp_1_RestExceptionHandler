Do create a white box test suite in JUnit 5 and Java 11 using REST Assured to achieve full test coverage, including methods, lines, and all branches with all possible execution paths, according the instructions delimited by %%%%%, whith is part of the REST Java Application code delimited by *****. Use the swagger documentation delimited by ##### to provide complementary information about the application. If the uncovered line is related to the <init> method (constructor), generate a test case  that explicitly instantiates the class to ensure the constructor is executed.Your responses must contain only Java code in JUnit 5 format.

If applicable, use the following details in your test suite:
Registered user data: {"email":"ivan.petrov@yandex.ru","password":"petrov","name":"Ivan Petrov","phone":"+7 123 456 78 90","address":"Riesstrasse 18"}

Follow these five instructions for this generated test code:

Instruction 1: Add this package line to generated test code file:
package market;

Instruction 2: Add the following Java imports:
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;

Instruction 3. Create the class declaration using: gpt35_run01_RestExceptionHandlerTest

Instruction 4: Declare these variables:
private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5: Add these setup and teardown methods:
@BeforeAll
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}


@AfterAll
public static void tearDown() {
    controller.stopSut();
}


@BeforeEach
public void initTest() {
    controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","CART_ITEM","PRODUCT","CART","CONTACTS"));
    controller.resetStateOfSUT();
}

%%%%%
Class name: market/rest/exception/RestExceptionHandler
Method: customNotValidException
Lines: 66, 67, 68, 69, 70

Class name: market/rest/exception/RestExceptionHandler
Method: resolveErrorMessage
Lines: 105, 106, 107, 108
%%%%%
*****
package market.rest.exception;

import market.exception.CustomNotValidException;
import market.exception.UnknownEntityException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;

import java.util.List;
import java.util.Locale;

@ControllerAdvice(basePackages = "market.rest")
@RestController
public class RestExceptionHandler {
	private static final String ARGUMENT_VALIDATION_CODE = "Error.Validation.Parameter";
	private static final String NOT_EXIST_CODE = "NotExist";

	private static final Logger log = LogManager.getLogger(RestExceptionHandler.class);

	private final MessageSource messageSource;

	public RestExceptionHandler(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	@ExceptionHandler(Exception.class)
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
	public RestErrorResponse otherExceptions(Exception e, WebRequest request) {
		RestErrorResponse response = new RestErrorResponse(e.getMessage(), request);
		log.error(response.toString(), e);
		return response;
	}

	@ExceptionHandler(AccessDeniedException.class)
	@ResponseStatus(HttpStatus.UNAUTHORIZED)
	public RestErrorResponse accessDeniedException(AccessDeniedException e, WebRequest request) {
		RestErrorResponse response = new RestErrorResponse(e.getMessage(), request);
		log.warn(response.toString());
		return response;
	}

	@ExceptionHandler(UnknownEntityException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public RestErrorResponse unknownEntityException(UnknownEntityException e, WebRequest request) {
		String entityType = e.getEntityType();
		List<FieldError> fieldErrors = e.getFieldErrors();
		RestErrorResponse response = createLocalizedResponse(NOT_EXIST_CODE, entityType, fieldErrors, request);
		log.warn(response.toString());
		return response;
	}

	@ExceptionHandler(CustomNotValidException.class)
	@ResponseStatus(HttpStatus.NOT_ACCEPTABLE)
	public RestErrorResponse customNotValidException(CustomNotValidException e, WebRequest request) {
		String entityType = e.getEntityType();
		List<FieldError> fieldErrors = e.getFieldErrors();
		RestErrorResponse response = createLocalizedResponse(ARGUMENT_VALIDATION_CODE, entityType, fieldErrors, request);
		log.warn(response.toString());
		return response;
	}

	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.NOT_ACCEPTABLE)
	public RestErrorResponse processValidationError(MethodArgumentNotValidException e, WebRequest request) {
		BindingResult result = e.getBindingResult();
		String objectName = result.getObjectName();
		List<FieldError> fieldErrors = result.getFieldErrors();
		RestErrorResponse response = createLocalizedResponse(ARGUMENT_VALIDATION_CODE, objectName, fieldErrors, request);
		log.warn(response.toString());
		return response;
	}

	private RestErrorResponse createLocalizedResponse(String localizationCode, String entityType,
		List<FieldError> fieldErrors, WebRequest request)
	{
		Locale currentLocale = LocaleContextHolder.getLocale();
		String localizedMessage = messageSource.getMessage(localizationCode, null, currentLocale);
		RestErrorResponse response = new RestErrorResponse(localizedMessage, entityType, request);
		return resolveFieldErrors(response, fieldErrors);
	}

	private RestErrorResponse resolveFieldErrors(RestErrorResponse response, List<FieldError> fieldErrors) {
		for (FieldError fieldError : fieldErrors) {
			String localizedErrorMessage = resolveErrorMessage(fieldError);
			response.addFieldError(fieldError.getField(), localizedErrorMessage);
		}
		return response;
	}

	private String resolveErrorMessage(FieldError fieldError) {
		Locale currentLocale = LocaleContextHolder.getLocale();
		String localizedErrorMessage = messageSource.getMessage(fieldError, currentLocale);

		if (localizedErrorMessage.equals(fieldError.getDefaultMessage())) {
			String[] fieldErrorCodes = fieldError.getCodes();
			if (fieldErrorCodes != null)
				localizedErrorMessage = fieldErrorCodes[0];
		}
		return localizedErrorMessage;
	}
}

*****
#####
{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "localhost:28372",
  "basePath": "/",
  "tags": [
    {
      "name": "cart-rest-controller",
      "description": "Cart Rest Controller"
    },
    {
      "name": "contacts-rest-controller",
      "description": "Contacts Rest Controller"
    },
    {
      "name": "customer-rest-controller",
      "description": "Customer Rest Controller"
    },
    {
      "name": "orders-rest-controller",
      "description": "Orders Rest Controller"
    },
    {
      "name": "products-rest-controller",
      "description": "Products Rest Controller"
    }
  ],
  "paths": {
    "/customer": {
      "get": {
        "tags": [
          "customer-rest-controller"
        ],
        "summary": "getCustomer",
        "operationId": "getCustomerUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDTORes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/customer/cart": {
      "get": {
        "tags": [
          "cart-rest-controller"
        ],
        "summary": "getCart",
        "operationId": "getCartUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "cart-rest-controller"
        ],
        "summary": "addItem",
        "operationId": "addItemUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartItemDTOReq"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "cart-rest-controller"
        ],
        "summary": "clearCart",
        "operationId": "clearCartUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartDTO"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/customer/cart/delivery": {
      "put": {
        "tags": [
          "cart-rest-controller"
        ],
        "summary": "setDelivery",
        "operationId": "setDeliveryUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "included",
            "in": "query",
            "description": "included",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/customer/cart/pay": {
      "post": {
        "tags": [
          "cart-rest-controller"
        ],
        "summary": "payByCard",
        "operationId": "payByCardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "card",
            "description": "card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreditCardDTO"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/customer/contacts": {
      "get": {
        "tags": [
          "contacts-rest-controller"
        ],
        "summary": "getContacts",
        "operationId": "getContactsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsDTORes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "contacts-rest-controller"
        ],
        "summary": "updateContacts",
        "operationId": "updateContactsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "contactsDto",
            "description": "contactsDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactsDTOReq"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContactsDTORes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/customer/orders": {
      "get": {
        "tags": [
          "orders-rest-controller"
        ],
        "summary": "getOrders",
        "operationId": "getOrdersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderDTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/customer/orders/{orderId}": {
      "get": {
        "tags": [
          "orders-rest-controller"
        ],
        "summary": "getOrder",
        "operationId": "getOrderUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "products-rest-controller"
        ],
        "summary": "getProducts",
        "operationId": "getProductsUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductDTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "products-rest-controller"
        ],
        "summary": "getProduct",
        "operationId": "getProductUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "customer-rest-controller"
        ],
        "summary": "createCustomer",
        "operationId": "createCustomerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDTOReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserDTORes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "CartDTO": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "cartItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItemDTORes"
          }
        },
        "deliveryCost": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryIncluded": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        },
        "productsCost": {
          "type": "number",
          "format": "double"
        },
        "totalCost": {
          "type": "number",
          "format": "double"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string"
        }
      },
      "title": "CartDTO"
    },
    "CartItemDTOReq": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CartItemDTOReq"
    },
    "CartItemDTORes": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CartItemDTORes"
    },
    "ContactsDTOReq": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100,
          "pattern": "^[^#$%^*()']*$"
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20,
          "pattern": "^\\+[1-9][0-9]?[\\s]*\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{2}$"
        }
      },
      "title": "ContactsDTOReq"
    },
    "ContactsDTORes": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100,
          "pattern": "^[^#$%^*()']*$"
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20,
          "pattern": "^\\+[1-9][0-9]?[\\s]*\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{2}$"
        }
      },
      "title": "ContactsDTORes"
    },
    "CreditCardDTO": {
      "type": "object",
      "properties": {
        "ccNumber": {
          "type": "string",
          "pattern": "\\b(?:\\d[ -]*?){13,16}\\b"
        }
      },
      "title": "CreditCardDTO"
    },
    "Link": {
      "type": "object",
      "properties": {
        "deprecation": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "hreflang": {
          "type": "string"
        },
        "media": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profile": {
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/LinkRelation"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Link"
    },
    "LinkRelation": {
      "type": "object",
      "title": "LinkRelation"
    },
    "Links": {
      "type": "object",
      "properties": {
        "empty": {
          "type": "boolean"
        }
      },
      "title": "Links"
    },
    "OrderDTO": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "billNumber": {
          "type": "integer",
          "format": "int32"
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "deliveryCost": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryIncluded": {
          "type": "boolean"
        },
        "executed": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "payed": {
          "type": "boolean"
        },
        "productsCost": {
          "type": "number",
          "format": "double"
        },
        "totalCost": {
          "type": "number",
          "format": "double"
        },
        "userAccount": {
          "type": "string"
        }
      },
      "title": "OrderDTO"
    },
    "ProductDTO": {
      "type": "object",
      "required": [
        "alcohol",
        "price",
        "volume"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "maximum": 2000,
          "exclusiveMaximum": false
        },
        "alcohol": {
          "type": "number",
          "format": "float",
          "minimum": 1,
          "maximum": 96,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "available": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "distillery": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[^#$%^&*()']*$"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ProductDTO"
    },
    "UserDTOReq": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100,
          "pattern": "^[^#$%^*()']*$"
        },
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50,
          "pattern": "^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]+$"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50,
          "pattern": "^[\\pL '-]+$"
        },
        "password": {
          "type": "string",
          "minLength": 6,
          "maxLength": 50,
          "pattern": "^[a-zA-Z0-9]+$"
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20,
          "pattern": "^\\+[1-9][0-9]?[\\s]*\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{2}$"
        }
      },
      "title": "UserDTOReq"
    },
    "UserDTORes": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/Links"
        },
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100,
          "pattern": "^[^#$%^*()']*$"
        },
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50,
          "pattern": "^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]+$"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50,
          "pattern": "^[\\pL '-]+$"
        },
        "password": {
          "type": "string",
          "minLength": 6,
          "maxLength": 50,
          "pattern": "^[a-zA-Z0-9]+$"
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20,
          "pattern": "^\\+[1-9][0-9]?[\\s]*\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{2}$"
        }
      },
      "title": "UserDTORes"
    }
  }
}
#####
