You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 11, JUnit 5, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 5 format.

#####
Line: 121
Expected status code <201> but was <406>.
----------------------------------------
Line: 91
Expected status code <201> but was <406>.
----------------------------------------
Line: 162
Expected status code <400> but was <406>.
----------------------------------------

#####
*****

package market;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

// Removed erroneous import for market.controllers.CustomerRestController
// Added a mock implementation for CustomerRestController to resolve the compilation issue
class CustomerRestController {
    public CustomerRestController(Object arg1, Object arg2) {
        // Mock constructor implementation
    }
}

public class gpt4o_run01_CustomerRestControllerTest {

    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","CART_ITEM","PRODUCT","CART","CONTACTS"));
        controller.resetStateOfSUT();
    }

    @Test
    public void testCreateCustomerSuccess() {
        String email = "ivan.petrov@yandex.ru";
        String password = "petrov";
        String name = "Ivan Petrov";
        String phone = "+7 123 456 78 90";
        String address = "Riesstrasse 18";

        given()
            .baseUri(baseUrlOfSut)
            .contentType("application/json")
            .body(Map.of(
                "email", email,
                "password", password,
                "name", name,
                "phone", phone,
                "address", address
            ))
        .when()
            .post("/register")
        .then()
            .statusCode(201)
            .body("email", equalTo(email))
            .body("name", equalTo(name))
            .body("phone", equalTo(phone))
            .body("address", equalTo(address))
            .body("_links", notNullValue());
    }

    @Test
    public void testCreateCustomerEmailAlreadyExists() {
        String email = "ivan.petrov@yandex.ru";
        String password = "petrov";
        String name = "Ivan Petrov";
        String phone = "+7 123 456 78 90";
        String address = "Riesstrasse 18";

        // First registration
        given()
            .baseUri(baseUrlOfSut)
            .contentType("application/json")
            .body(Map.of(
                "email", email,
                "password", password,
                "name", name,
                "phone", phone,
                "address", address
            ))
        .when()
            .post("/register")
        .then()
            .statusCode(201);

        // Duplicate registration attempt
        given()
            .baseUri(baseUrlOfSut)
            .contentType("application/json")
            .body(Map.of(
                "email", email,
                "password", password,
                "name", name,
                "phone", phone,
                "address", address
            ))
        .when()
            .post("/register")
        .then()
            .statusCode(400)
            .body("message", containsString("Email already exists"));
    }

    @Test
    public void testCreateCustomerValidationFailure() {
        String email = "invalid-email";
        String password = "short";
        String name = "Ivan Petrov";
        String phone = "invalid-phone-number";
        String address = "Riesstrasse 18";

        given()
            .baseUri(baseUrlOfSut)
            .contentType("application/json")
            .body(Map.of(
                "email", email,
                "password", password,
                "name", name,
                "phone", phone,
                "address", address
            ))
        .when()
            .post("/register")
        .then()
            .statusCode(400)
            .body("message", containsString("Validation failed"));
    }

    @Test
    public void testConstructorExecution() {
        CustomerRestController controller = new CustomerRestController(null, null);
        assertNotNull(controller);
    }
}

*****
