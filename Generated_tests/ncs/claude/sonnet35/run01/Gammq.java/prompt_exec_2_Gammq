You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 80
Expected status code <500> but was <400>.
----------------------------------------
Line: 106
Expected status code <500> but was <400>.
----------------------------------------
Line: 93
Expected status code <500> but was <400>.
----------------------------------------

#####
*****
package org.restncs;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class sonnet35_run01_GammqTest {

    private static final SutHandler controller = new em.embedded.org.restncs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }

    @Test
    public void testGammqValidInput() {
        double a = 2.0;
        double x = 1.5;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }

    @Test
    public void testGammqInvalidInput() {
        double a = -1.0;
        double x = 1.5;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(500);
    }

    @Test
    public void testGammqZeroInput() {
        double a = 0.0;
        double x = 1.5;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(500);
    }

    @Test
    public void testGammqNegativeX() {
        double a = 2.0;
        double x = -1.5;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(500);
    }

    @Test
    public void testGammqLargeInput() {
        double a = 100.0;
        double x = 50.0;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }

    @Test
    public void testGammqSmallInput() {
        double a = 0.1;
        double x = 0.05;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }

    @Test
    public void testGammqEqualInput() {
        double a = 2.0;
        double x = 2.0;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }

    @Test
    public void testGammqXLessThanAPlusOne() {
        double a = 5.0;
        double x = 5.5;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }

    @Test
    public void testGammqXGreaterThanAPlusOne() {
        double a = 5.0;
        double x = 7.0;

        given()
            .accept("application/json")
        .when()
            .get(baseUrlOfSut + "/api/gammq/" + a + "/" + x)
        .then()
            .statusCode(200)
            .body("resultAsDouble", notNullValue());
    }
}
*****
