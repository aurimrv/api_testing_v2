Do create a white box test suite in JUnit 4 and Java 8 using REST Assured to achieve full test coverage, including methods, lines, and all branches with all possible execution paths, according to the instructions delimited by %%%%%, which is part of the REST Java Application code delimited by *****. Use the Swagger documentation delimited by ##### to provide complementary information about the application. If an uncovered line is related to the <init> method (constructor), generate a test case that explicitly instantiates the class to ensure the constructor is executed. Your responses must contain only Java code in JUnit 4 format.

Follow these five instructions for this generated test code:

Instruction 1: Add this package line to generated test code file:
package org.restncs;

Instruction 2: Add the following Java imports to generated test code file:
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

Instruction 3. Class Declaration: Create the class with the following declaration: gpt4o_run01_BessjTest

Instruction 4: Create these variables in the generated test code:
private static final SutHandler controller = new em.embedded.org.restncs.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5: Include the following setup and teardown methods in generated test code file:
@BeforeClass
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}

@AfterClass
public static void tearDown() {
    controller.stopSut();
}

@Before
public void initTest() {
    controller.resetStateOfSUT();
}

%%%%%
Class name: org/restncs/imp/Bessj
Method: bessj1
Lines: 114
%%%%%
*****
package org.restncs.imp;

public class Bessj {

    private final double ACC = 40.0;
    private final double BIGNO = 1.0e10;
    private final double BIGNI = 1.0e-10;

    public  double bessj(int n, double x) {
        int j, jsum, m;
        double ax, bj, bjm, bjp, sum, tox, ans;

        if (n < 2)
            throw new IllegalArgumentException("Index n less than 2 in bessj");

        ax = Math.abs(x);

        if (ax == 0.0)
            return 0.0;
        else if (ax > n) {
            tox = 2.0 / ax;
            bjm = bessj0(ax);
            bj = bessj1(ax);

            for (j = 1; j < n; j++) {
                bjp = j * tox * bj - bjm;
                bjm = bj;
                bj = bjp;
            }

            ans = bj;
        } else {
            tox = 2.0 / ax;
            m = 2 * ((n + (int) Math.round(Math.sqrt(ACC * n))) / 2);
            jsum = 0;
            bjp = ans = sum = 0.0;
            bj = 1.0;

            for (j = m; j > 0; j--) {
                bjm = j * tox * bj - bjp;
                bjp = bj;
                bj = bjm;

                if (Math.abs(bj) > BIGNO) {
                    bj *= BIGNI;
                    bjp *= BIGNI;
                    ans *= BIGNI;
                    sum *= BIGNI;
                }

                if (jsum != 0)
                    sum += bj;

                jsum = (jsum != 0) ? 0 : 1;

                if (j == n)
                    ans = bjp;
            }

            sum = 2.0 * sum - bj;
            ans /= sum;
        }
        return x < 0.0 && (n & 1) != 0 ? -ans : ans;
    }


    private static double bessj0(double x) {
        double ax, z;
        double xx, y, ans, ans1, ans2;

        if ((ax = Math.abs(x)) < 8.0) {
            y = x * x;
            ans1 = 57568490574.0 + y * (-13362590354.0 + y * (651619640.7
                    + y * (-11214424.18 + y * (77392.33017 + y * (-184.9052456)))));
            ans2 = 57568490411.0 + y * (1029532985.0 + y * (9494680.718
                    + y * (59272.64853 + y * (267.8532712 + y * 1.0))));
            ans = ans1 / ans2;
        } else {
            z = 8.0 / ax;
            y = z * z;
            xx = ax - 0.785398164;
            ans1 = 1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4
                    + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));
            ans2 = -0.1562499995e-1 + y * (0.1430488765e-3
                    + y * (-0.6911147651e-5 + y * (0.7621095161e-6
                    - y * 0.934935152e-7)));
            ans = Math.sqrt(0.636619772 / ax) * (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);
        }
        return ans;
    }


    private static double bessj1(double x) {
        double ax, z;
        double xx, y, ans, ans1, ans2;

        if ((ax = Math.abs(x)) < 8.0) {
            y = x * x;
            ans1 = x * (72362614232.0 + y * (-7895059235.0 + y * (242396853.1
                    + y * (-2972611.439 + y * (15704.48260 + y * (-30.16036606))))));
            ans2 = 144725228442.0 + y * (2300535178.0 + y * (18583304.74
                    + y * (99447.43394 + y * (376.9991397 + y * 1.0))));
            ans = ans1 / ans2;
        } else {
            z = 8.0 / ax;
            y = z * z;
            xx = ax - 2.356194491;
            ans1 = 1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4
                    + y * (0.2457520174e-5 + y * (-0.240337019e-6))));
            ans2 = 0.04687499995 + y * (-0.2002690873e-3
                    + y * (0.8449199096e-5 + y * (-0.88228987e-6
                    + y * 0.105787412e-6)));
            ans = Math.sqrt(0.636619772 / ax) * (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);
            if (x < 0.0) ans = -ans;
        }

        return ans;
    }
}

*****
#####
{
  "swagger": "2.0",
  "info": {
    "description": "Examples of different numerical algorithms accessible via REST",
    "version": "1.0",
    "title": "API for Numerical Case Study (NCS)"
  },
  "schemes": [
    "http"
  ],
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "ncs-rest",
      "description": "Ncs Rest"
    }
  ],
  "paths": {
    "/api/bessj/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "bessj",
        "operationId": "bessjUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/expint/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "expint",
        "operationId": "expintUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/fisher/{m}/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "fisher",
        "operationId": "fisherUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "m",
            "in": "path",
            "description": "m",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/gammq/{a}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "gammq",
        "operationId": "gammqUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "a",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/remainder/{a}/{b}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "remainder",
        "operationId": "remainderUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "a",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "b",
            "in": "path",
            "description": "b",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/triangle/{a}/{b}/{c}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "Check the triangle type of the given three edges",
        "operationId": "checkTriangleUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "First edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "b",
            "in": "path",
            "description": "Second edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "c",
            "in": "path",
            "description": "Third edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Dto": {
      "type": "object",
      "properties": {
        "resultAsDouble": {
          "type": "number",
          "format": "double"
        },
        "resultAsInt": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Dto"
    }
  }
}
#####
