You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 169
Response body doesn't match expectation.
Expected: "0"
Actual: 10
----------------------------------------
Line: 69
Response body doesn't match expectation.
Expected: "1"
Actual: 10
----------------------------------------
Line: 99
Response body doesn't match expectation.
Expected: "4"
Actual: 10
----------------------------------------
Line: 109
Response body doesn't match expectation.
Expected: "5"
Actual: 10
----------------------------------------
Line: 79
Response body doesn't match expectation.
Expected: "2"
Actual: 10
----------------------------------------
Line: 89
Response body doesn't match expectation.
Expected: "3"
Actual: 10
----------------------------------------
Line: 119
Response body doesn't match expectation.
Expected: "6"
Actual: 10
----------------------------------------
Line: 129
Response body doesn't match expectation.
Expected: "7"
Actual: 10
----------------------------------------
Line: 149
Response body doesn't match expectation.
Expected: "9"
Actual: 10
----------------------------------------
Line: 139
Response body doesn't match expectation.
Expected: "8"
Actual: 10
----------------------------------------

#####
*****
package org.restscs;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class sonnet35_run01_CostfunsTest {

    private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }

    @Test
    public void testConstructor() {
        org.restscs.imp.Costfuns costfuns = new org.restscs.imp.Costfuns();
        assertNotNull(costfuns);
    }

    @Test
    public void testSubjectWithI5() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/5/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("1"));
    }

    @Test
    public void testSubjectWithILessThanNeg444() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/-445/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("2"));
    }

    @Test
    public void testSubjectWithILessThanOrEqualToNeg333() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/-333/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("3"));
    }

    @Test
    public void testSubjectWithIGreaterThan666() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/667/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("4"));
    }

    @Test
    public void testSubjectWithIGreaterThanOrEqualTo555() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/555/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("5"));
    }

    @Test
    public void testSubjectWithINotEqualToNeg4() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/0/anyString")
            .then()
            .statusCode(200)
            .body(equalTo("6"));
    }

    @Test
    public void testSubjectWithSEqualToS1PlusS2() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/0/baab")
            .then()
            .statusCode(200)
            .body(equalTo("7"));
    }

    @Test
    public void testSubjectWithSGreaterThanS2PlusS2PlusS1() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/0/ababba")
            .then()
            .statusCode(200)
            .body(equalTo("8"));
    }

    @Test
    public void testSubjectWithSGreaterThanOrEqualToS2PlusS2PlusS1() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/0/ababba")
            .then()
            .statusCode(200)
            .body(equalTo("9"));
    }

    @Test
    public void testSubjectWithSNotEqualToS2PlusS2() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/0/abc")
            .then()
            .statusCode(200)
            .body(equalTo("10"));
    }

    @Test
    public void testSubjectWithDefaultCase() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/costfuns/-4/abab")
            .then()
            .statusCode(200)
            .body(equalTo("0"));
    }
}
*****
