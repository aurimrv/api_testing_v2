Do create a white box test suite in JUnit 4 and Java 8 using REST Assured to achieve full test coverage, including methods, lines, and all branches with all possible execution paths, according to the instructions delimited by %%%%%, which is part of the REST Java Application code delimited by *****. Use the Swagger documentation delimited by ##### to provide complementary information about the application. If an uncovered line is related to the <init> method (constructor), generate a test case that explicitly instantiates the class to ensure the constructor is executed. Your responses must contain only Java code in JUnit 4 format.

Follow these five instructions for this generated test code:

Instruction 1: Add this package line to generated test code file:
package org.restscs;

Instruction 2: Add the following Java imports to generated test code file:
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;

Instruction 3. Class Declaration: Create the class with the following declaration: sonnet35_run01_CostfunsTest


Instruction 4: Create these variables in the generated test code:
private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5: Include the following setup and teardown methods in generated test code file:
@BeforeClass
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}


@AfterClass
public static void tearDown() {
    controller.stopSut();
}


@Before
public void initTest() {
    controller.resetStateOfSUT();
}

%%%%%
Class name: org/restscs/imp/Costfuns
Method: subject
Lines: 63
%%%%%
*****
//! futname = Subject      //NAME OF FUNCTION UNDER TEST
//! mutation = false        //SPECIFY MUTATION COVERAGE
//! textout = true        //WRITE INSTRUMENTED SUBJECT TO FILE
//! maxchildren = 500000  //MAX LENGTH OF SEARCH
//! totalpopsize = 100    //TOTAL SIZE OF POPULATIONS 
//! mutationpercent = 50  //REL FREQUENCY OF GENETIC MUTATION TO CROSSOVER
//! samefitcountmax = 100 //NUMBER OF CONSECUTIVE TESTS IN A POP 
//THAT MUST HAVE THE SAME COST FOR POP TO BE STAGNANT
//! verbose = false        //PRINT MESSAGES SHOWING PROGRESS OF SEARCH
//! showevery = 3000      //NUMBER OF CANDIDATE INPUTS GENERATED BETWEEN EACH SHOW
//! numbins = 0           //GRANULARITY OF CANDIDATE INPUT HISTOGRAM, SET TO 0 TO NOT COLLECT STATS
//! trialfirst = 1        //EACH TRIAL USES A DIFFERENT RANDOM SEED
//! triallast = 1         //NUMBER OF TRIALS = triallast - trialfirst + 1
//! name = costfuns       //NAME OF EXPT, NOT COMPUTATIONALLY SIGNIFICANT



package org.restscs.imp;

public class Costfuns
{
	public static String  subject(int i, String s)
	{
		int result = 0;

		//TEST COST FUNCTIONS
		String s1 = "ba";
		String s2 = "ab";
		if (i == 5) {     //i0
			result = 1;
		}
		if (i  < -444) {   //i1
			result = 2;
		}
		if (i  <= -333) {  //i2
			result = 3;
		}
		if (i  > 666) {    //i3
			result = 4;
		}
		if (i  >= 555) {   //i4
			result = 5;
		}
		if (i  != -4) {    //i5
			result = 6;
		}
		if (s.equals( s1 + s2)) {   //i6
			result = 7;
		}
		//THOSE operations are not defined in Java...
		/*
  if (s  <= s1..Remove(0, 1)) { //i7
  }
  if (s  < s1.Remove(1, 1)) {  //i8
  }
  */
  if (s.compareTo(s2 + s2 + s1)>0) {     //i9
	  result = 8;
  }
  if (s.compareTo(s2 + s2 + s1)  >= 0) {    //i10
	  result = 9;
  }
  if (s  != s2 + s2) {         //i11
	  result = 10;
  }
		 
		return "" + result;
	}
}


*****
#####
{
  "swagger": "2.0",
  "info": {
    "description": "Examples of different string algorithms accessible via REST",
    "version": "1.0",
    "title": "API for String Case Study (SCS)"
  },
  "schemes": [
    "http"
  ],
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "scs-rest",
      "description": "Scs Rest"
    }
  ],
  "paths": {
    "/api/calc/{op}/{arg1}/{arg2}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "calc",
        "operationId": "calcUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "description": "arg1",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "arg2",
            "in": "path",
            "description": "arg2",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "op",
            "in": "path",
            "description": "op",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/cookie/{name}/{val}/{site}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "cookie",
        "operationId": "cookieUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          },
          {
            "name": "site",
            "in": "path",
            "description": "site",
            "required": true,
            "type": "string"
          },
          {
            "name": "val",
            "in": "path",
            "description": "val",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/costfuns/{i}/{s}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "costfuns",
        "operationId": "costfunsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "i",
            "in": "path",
            "description": "i",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "s",
            "in": "path",
            "description": "s",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/dateparse/{dayname}/{monthname}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "dateParse",
        "operationId": "dateParseUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "dayname",
            "in": "path",
            "description": "dayname",
            "required": true,
            "type": "string"
          },
          {
            "name": "monthname",
            "in": "path",
            "description": "monthname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/filesuffix/{directory}/{file}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "fileSuffix",
        "operationId": "fileSuffixUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "directory",
            "in": "path",
            "description": "directory",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "path",
            "description": "file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/notypevar/{i}/{s}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "notyPevar",
        "operationId": "notyPevarUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "i",
            "in": "path",
            "description": "i",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "s",
            "in": "path",
            "description": "s",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/ordered4/{w}/{x}/{z}/{y}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "ordered4",
        "operationId": "ordered4UsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "w",
            "in": "path",
            "description": "w",
            "required": true,
            "type": "string"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "string"
          },
          {
            "name": "y",
            "in": "path",
            "description": "y",
            "required": true,
            "type": "string"
          },
          {
            "name": "z",
            "in": "path",
            "description": "z",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/pat/{txt}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "regex",
        "operationId": "regexUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "txt",
            "in": "path",
            "description": "txt",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/pat/{txt}/{pat}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "pat",
        "operationId": "patUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pat",
            "in": "path",
            "description": "pat",
            "required": true,
            "type": "string"
          },
          {
            "name": "txt",
            "in": "path",
            "description": "txt",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/text2txt/{word1}/{word2}/{word3}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "text2txt",
        "operationId": "text2txtUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "word1",
            "in": "path",
            "description": "word1",
            "required": true,
            "type": "string"
          },
          {
            "name": "word2",
            "in": "path",
            "description": "word2",
            "required": true,
            "type": "string"
          },
          {
            "name": "word3",
            "in": "path",
            "description": "word3",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/title/{sex}/{title}": {
      "get": {
        "tags": [
          "scs-rest"
        ],
        "summary": "title",
        "operationId": "titleUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "sex",
            "in": "path",
            "description": "sex",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "path",
            "description": "title",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  }
}
#####
