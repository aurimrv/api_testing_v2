You are a highly skilled test engineer specializing in debugging and resolving compilation errors and test failures in Java-based projects. Your expertise includes Java 8, JUnit 4, and REST Assured, allowing you to diagnose issues efficiently and provide precise, actionable fixes.

Given the test set below delimited by *****, fix the source lines indicated in the error messages delimited by #####, replacing only the expected by the actual values.

Do keep package, headers and accessories methods unchanged.

Do export all other corrected tests unchanged.

The response must contain only Java code in JUnit 4 format.

#####
Line: 102
Expected status code <200> but was <404>.
----------------------------------------
Line: 82
Expected status code <404> but was <200>.
----------------------------------------
Line: 133
Response body doesn't match expectation.
Expected: "none"
Actual: date
----------------------------------------
Line: 123
Response body doesn't match expectation.
Expected: "none"
Actual: 0
----------------------------------------
Line: 113
Response body doesn't match expectation.
Expected: "url"
Actual: {"timestamp":"2025-03-27T14:24:29.884+0000","status":404,"error":"Not Found","message":"No message available","path":"/api/pat/http://very-long-domain-name-with-many-subdomains.example.com/path/to/resource"}
----------------------------------------
Line: 93
Response body doesn't match expectation.
Expected: "0"
Actual: none
----------------------------------------
Line: 63
Response body doesn't match expectation.
Expected: "url"
Actual: {"timestamp":"2025-03-27T14:24:29.259+0000","status":404,"error":"Not Found","message":"No message available","path":"/api/pat/http://example.com/path"}
----------------------------------------

#####
*****
package org.restscs;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;

public class sonnet35_run01_RegexTest {

    private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;

    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }

    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }

    @Test
    public void testSubjectWithUrl() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/http://example.com/path")
            .then()
            .statusCode(404)
            .body(equalTo("url"));
    }

    @Test
    public void testSubjectWithDate() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/mon01jan")
            .then()
            .statusCode(200)
            .body(equalTo("date"));
    }

    @Test
    public void testSubjectWithFpe() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/123.45e-6")
            .then()
            .statusCode(404)
            .body(equalTo("none"));
    }

    @Test
    public void testSubjectWithNone() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/notmatching")
            .then()
            .statusCode(200)
            .body(equalTo("0"));
    }

    @Test
    public void testSubjectWithEmptyString() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/")
            .then()
            .statusCode(200)
            .body(equalTo("date"));
    }

    @Test
    public void testSubjectWithLongUrl() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/http://very-long-domain-name-with-many-subdomains.example.com/path/to/resource")
            .then()
            .statusCode(404)
            .body(equalTo("url"));
    }

    @Test
    public void testSubjectWithInvalidUrl() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/http:/invalid-url")
            .then()
            .statusCode(200)
            .body(equalTo("none"));
    }

    @Test
    public void testSubjectWithInvalidDate() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/mon32jan")
            .then()
            .statusCode(200)
            .body(equalTo("none"));
    }

    @Test
    public void testSubjectWithInvalidFpe() {
        given()
            .accept("*/*")
            .get(baseUrlOfSut + "/api/pat/123.45e")
            .then()
            .statusCode(200)
            .body(equalTo("none"));
    }
}

*****
